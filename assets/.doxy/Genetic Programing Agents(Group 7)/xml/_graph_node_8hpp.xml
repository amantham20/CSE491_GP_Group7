<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_graph_node_8hpp" kind="file" language="C++">
    <compoundname>GraphNode.hpp</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">cmath</includes>
    <includes local="no">execution</includes>
    <includes local="no">functional</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">numeric</includes>
    <includes local="no">optional</includes>
    <includes local="no">ranges</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="yes">../../core/AgentBase.hpp</includes>
    <includes local="yes">../../core/WorldBase.hpp</includes>
    <includes local="yes">../AgentLibary.hpp</includes>
    <includes refid="_g_p_agent_sensors_8hpp" local="yes">GPAgentSensors.hpp</includes>
    <includedby refid="_c_g_p_genotype_8hpp" local="yes">source/Agents/GP/CGPGenotype.hpp</includedby>
    <includedby refid="_graph_8hpp" local="yes">source/Agents/GP/Graph.hpp</includedby>
    <incdepgraph>
      <node id="15">
        <label>../../core/AgentBase.hpp</label>
      </node>
      <node id="16">
        <label>../../core/WorldBase.hpp</label>
      </node>
      <node id="19">
        <label>../../core/WorldGrid.hpp</label>
      </node>
      <node id="17">
        <label>../AgentLibary.hpp</label>
      </node>
      <node id="18">
        <label>GPAgentSensors.hpp</label>
        <link refid="_g_p_agent_sensors_8hpp_source"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>source/Agents/GP/GraphNode.hpp</label>
        <link refid="_graph_node_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="3">
        <label>array</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="5">
        <label>execution</label>
      </node>
      <node id="6">
        <label>functional</label>
      </node>
      <node id="7">
        <label>limits</label>
      </node>
      <node id="8">
        <label>memory</label>
      </node>
      <node id="9">
        <label>numeric</label>
      </node>
      <node id="10">
        <label>optional</label>
      </node>
      <node id="11">
        <label>ranges</label>
      </node>
      <node id="12">
        <label>stdexcept</label>
      </node>
      <node id="13">
        <label>string</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>source/Agents/GP/CGPAgent.hpp</label>
        <link refid="_c_g_p_agent_8hpp_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>source/Agents/GP/CGPGenotype.hpp</label>
        <link refid="_c_g_p_genotype_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>source/Agents/GP/GPTrainingLoop.hpp</label>
        <link refid="_g_p_training_loop_8hpp_source"/>
      </node>
      <node id="6">
        <label>source/Agents/GP/Graph.hpp</label>
        <link refid="_graph_8hpp_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>source/Agents/GP/GraphBuilder.hpp</label>
        <link refid="_graph_builder_8hpp_source"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>source/Agents/GP/GraphNode.hpp</label>
        <link refid="_graph_node_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structcowboys_1_1_node_function" prot="public">cowboys::NodeFunction</innerclass>
    <innerclass refid="classcowboys_1_1_graph_node" prot="public">cowboys::GraphNode</innerclass>
    <innernamespace refid="namespacecowboys">cowboys</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="_graph_node_8hpp_1a214a9b541003b871f81961eab349761d" prot="public" static="no">
        <name>PAR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/Agents/GP/GraphNode.hpp" line="8" column="10" bodyfile="source/Agents/GP/GraphNode.hpp" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macro<sp/>for<sp/>parallel<sp/>execution,<sp/>add<sp/>-DPARALLEL<sp/>flag<sp/>to<sp/>CMAKE_CXX_FLAGS<sp/>when<sp/>building<sp/>to<sp/>enable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>PARALLEL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execution&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAR<sp/>std::execution::par,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PAR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;execution&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;optional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ranges&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../core/AgentBase.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../../core/WorldBase.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../AgentLibary.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;GPAgentSensors.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacecowboys" kindref="compound">cowboys</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GraphNode;<sp/></highlight></codeline>
<codeline lineno="33" refid="namespacecowboys_1a7c2647bb83ef986475c089941e49bb66" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="namespacecowboys_1a7c2647bb83ef986475c089941e49bb66" kindref="member">InnerFunction</ref><sp/>=<sp/>double<sp/>(*)(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;);</highlight></codeline>
<codeline lineno="35" refid="structcowboys_1_1_node_function" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structcowboys_1_1_node_function" kindref="compound">NodeFunction</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1a7c2647bb83ef986475c089941e49bb66" kindref="member">InnerFunction</ref><sp/>function{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>*agent{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function(node,<sp/>*agent);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNull()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>function<sp/>==<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classcowboys_1_1_graph_node" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;GraphNode&gt;<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47" refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;GraphNode&gt;&gt;<sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structcowboys_1_1_node_function" kindref="compound">NodeFunction</ref><sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref>{0};</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classcowboys_1_1_graph_node_1a7d3291d4344ee789ba9384e97a29b452" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;GraphNode<sp/>*&gt;<sp/><ref refid="classcowboys_1_1_graph_node_1a7d3291d4344ee789ba9384e97a29b452" kindref="member">outputs</ref>;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classcowboys_1_1_graph_node_1a44f1486e5cd7df091926e8851990b563" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a44f1486e5cd7df091926e8851990b563" kindref="member">cached_output</ref>{0};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" kindref="member">cached_output_valid</ref>{</highlight><highlight class="keyword">false</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classcowboys_1_1_graph_node_1a57c2531f2fab97dc4f7ae5211c004327" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a57c2531f2fab97dc4f7ae5211c004327" kindref="member">AddOutput</ref>(<ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>*node)<sp/>{<sp/><ref refid="classcowboys_1_1_graph_node_1a7d3291d4344ee789ba9384e97a29b452" kindref="member">outputs</ref>.push_back(node);<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" kindref="member">cached_output_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;output<sp/>:<sp/><ref refid="classcowboys_1_1_graph_node_1a7d3291d4344ee789ba9384e97a29b452" kindref="member">outputs</ref>)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output-&gt;RecursiveInvalidateCache();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">~GraphNode</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="classcowboys_1_1_graph_node_1a7952283961ad517bc6bb77cc8dcc3156" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a7952283961ad517bc6bb77cc8dcc3156" kindref="member">GraphNode</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>default_value)<sp/>:<sp/><ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref>{default_value}<sp/>{}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref>(<ref refid="structcowboys_1_1_node_function" kindref="compound">NodeFunction</ref><sp/>function)<sp/>:<sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref>{function}<sp/>{}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>GraphNode(<ref refid="namespacecowboys_1a7c2647bb83ef986475c089941e49bb66" kindref="member">InnerFunction</ref><sp/>function)<sp/>:<sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref>{function}<sp/>{}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classcowboys_1_1_graph_node_1a5a5d6a8f850e42ccd5c21a7cd5bbf399" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a5a5d6a8f850e42ccd5c21a7cd5bbf399" kindref="member">GetOutput</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" kindref="member">cached_output_valid</ref>)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a44f1486e5cd7df091926e8851990b563" kindref="member">cached_output</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>result<sp/>=<sp/><ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invoke<sp/>function<sp/>pointer<sp/>if<sp/>it<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref>.IsNull())<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>=<sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cache<sp/>the<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a44f1486e5cd7df091926e8851990b563" kindref="member">cached_output</ref><sp/>=<sp/>result;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" kindref="member">cached_output_valid</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/><ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>values;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values.reserve(<ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.size());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(<ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.cbegin(),<sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.cend(),<sp/>std::back_inserter(values),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;node)<sp/>{<sp/>return<sp/>node-&gt;GetOutput();<sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="classcowboys_1_1_graph_node_1aa1d58d2106949021178e18ac542df93c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;<sp/>std::optional&lt;std::vector&lt;double&gt;&gt;<sp/><ref refid="classcowboys_1_1_graph_node_1aa1d58d2106949021178e18ac542df93c" kindref="member">GetInputValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;size_t,<sp/>N&gt;<sp/>&amp;indices)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>max_index<sp/>=<sp/>*std::max_element(indices.cbegin(),<sp/>indices.cend());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_index<sp/>&gt;=<sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.size())</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::nullopt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>values;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values.reserve(N);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::transform(indices.cbegin(),<sp/>indices.cend(),<sp/>std::back_inserter(values),</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;index)<sp/>{<sp/>return<sp/>inputs.at(index)-&gt;GetOutput();<sp/>});</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classcowboys_1_1_graph_node_1adb518a944000d6625ce03d13e5193226" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1adb518a944000d6625ce03d13e5193226" kindref="member">SetFunctionPointer</ref>(<ref refid="structcowboys_1_1_node_function" kindref="compound">NodeFunction</ref><sp/>function)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref><sp/>=<sp/>function;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classcowboys_1_1_graph_node_1a0d13055404f602579b1e05eb9b4ed8cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a0d13055404f602579b1e05eb9b4ed8cf" kindref="member">SetFunctionPointer</ref>(<ref refid="namespacecowboys_1a7c2647bb83ef986475c089941e49bb66" kindref="member">InnerFunction</ref><sp/>inner_function)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1ac8e55f136a0e35fc4d9ffd946b2d2ccf" kindref="member">function_pointer</ref><sp/>=<sp/><ref refid="structcowboys_1_1_node_function" kindref="compound">NodeFunction</ref>{inner_function};</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="classcowboys_1_1_graph_node_1afa1b37076a3681dfbb362b114c26c7bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1afa1b37076a3681dfbb362b114c26c7bf" kindref="member">AddInput</ref>(std::shared_ptr&lt;GraphNode&gt;<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.push_back(node);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>a<sp/>weak<sp/>pointer<sp/>to<sp/>this<sp/>node<sp/>to<sp/>the<sp/>input<sp/>node&apos;s<sp/>outputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node-&gt;AddOutput(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="classcowboys_1_1_graph_node_1a2ec99f5328eaf84155cfe604fcd6f2e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a2ec99f5328eaf84155cfe604fcd6f2e1" kindref="member">AddInputs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;GraphNode&gt;&gt;<sp/>&amp;nodes)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.insert(<ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref>.cend(),<sp/>nodes.cbegin(),<sp/>nodes.cend());</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="classcowboys_1_1_graph_node_1a1ab71cc7460f3fbe4a3d5b019a315584" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a1ab71cc7460f3fbe4a3d5b019a315584" kindref="member">SetInputs</ref>(std::vector&lt;std::shared_ptr&lt;GraphNode&gt;&gt;<sp/>nodes)<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a3180020f18cd9028187c5ee99cc33cd9" kindref="member">inputs</ref><sp/>=<sp/>nodes;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classcowboys_1_1_graph_node_1a1502f2bfbf6ea8d90c148a1e71c5c299" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a1502f2bfbf6ea8d90c148a1e71c5c299" kindref="member">SetDefaultOutput</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref><sp/>!=<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classcowboys_1_1_graph_node_1a13e217d25a26fa30d06b8615b3122f2b" kindref="member">RecursiveInvalidateCache</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a57fd3fa01192edef2d40c82d9e48d83b" kindref="member">default_output</ref>;<sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="classcowboys_1_1_graph_node_1a47cd99774fbe3a282157cef5b21cf958" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a47cd99774fbe3a282157cef5b21cf958" kindref="member">IsCacheValid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node_1a10e9727ea6522de28c13fa2996f8ecd1" kindref="member">cached_output_valid</ref>;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="namespacecowboys_1a2f056f1a4aecb240d5332908fdb7b527" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a2f056f1a4aecb240d5332908fdb7b527" kindref="member">Sum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="namespacecowboys_1aba71998b80dfdf6f4ea2a7df48361cb5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1aba71998b80dfdf6f4ea2a7df48361cb5" kindref="member">And</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(vals.cbegin(),<sp/>vals.cend(),<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>val<sp/>==<sp/>0.;<sp/>})<sp/>?<sp/>0.<sp/>:<sp/>1.;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="namespacecowboys_1a814ec1d3ff2a1b7f5ee1814050fde1a3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a814ec1d3ff2a1b7f5ee1814050fde1a3" kindref="member">AnyEq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vals.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>vals.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vals.at(0)<sp/>==<sp/>vals.at(i))</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="namespacecowboys_1aa67f79467415e8b65a208e083d577b33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1aa67f79467415e8b65a208e083d577b33" kindref="member">Not</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>&lt;1&gt;(std::array&lt;size_t,<sp/>1&gt;{0});</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vals.has_value())</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*vals)[0]<sp/>==<sp/>0.<sp/>?<sp/>1.<sp/>:<sp/>0.;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="namespacecowboys_1a096431a5e693001753f1073d061b2a45" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a096431a5e693001753f1073d061b2a45" kindref="member">Gate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>&lt;2&gt;(std::array&lt;size_t,<sp/>2&gt;{0,<sp/>1});</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vals.has_value())</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*vals)[1]<sp/>!=<sp/>0.<sp/>?<sp/>(*vals)[0]<sp/>:<sp/>0.;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="namespacecowboys_1a600040bf260198f6ab9b4980f0d47c9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a600040bf260198f6ab9b4980f0d47c9f" kindref="member">Sin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::sin(val);<sp/>});</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="namespacecowboys_1a23ee900029214ea7f0c0ff7a6c0ced30" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a23ee900029214ea7f0c0ff7a6c0ced30" kindref="member">Cos</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::cos(val);<sp/>});</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="namespacecowboys_1a1f1ff8ef29777c707d3ed36c71321967" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a1f1ff8ef29777c707d3ed36c71321967" kindref="member">Product</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>1.,<sp/>std::multiplies{});</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="namespacecowboys_1af663206543544e1b202421e0d7ce1a0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1af663206543544e1b202421e0d7ce1a0f" kindref="member">Reciprocal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>1.<sp/>/<sp/>(val<sp/>+<sp/>std::numeric_limits&lt;double&gt;::epsilon());<sp/>});</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="namespacecowboys_1a829095846be4e7c7c10083198caa7af6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a829095846be4e7c7c10083198caa7af6" kindref="member">Exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::exp(val);<sp/>});</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="namespacecowboys_1a26e5401ea9982262cc2807a29da8d571" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a26e5401ea9982262cc2807a29da8d571" kindref="member">LessThan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_sorted(vals.begin(),<sp/>vals.end(),<sp/>std::less{});</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="namespacecowboys_1ac87a28134c362a15afe90d9713689d68" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1ac87a28134c362a15afe90d9713689d68" kindref="member">GreaterThan</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_sorted(vals.begin(),<sp/>vals.end(),<sp/>std::greater{});</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="namespacecowboys_1ad73ee65cbef4ee7d663505357d6a953a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1ad73ee65cbef4ee7d663505357d6a953a" kindref="member">Max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vals.empty())</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::max_element(vals.cbegin(),<sp/>vals.cend());</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="namespacecowboys_1a6ddf96d02edea36a4085bad5977687e2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a6ddf96d02edea36a4085bad5977687e2" kindref="member">Min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vals.empty())</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*std::min_element(vals.cbegin(),<sp/>vals.cend());</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="namespacecowboys_1a613a473e8cd07e1a1ea189c43121f488" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a613a473e8cd07e1a1ea189c43121f488" kindref="member">NegSum</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="namespacecowboys_1a2f056f1a4aecb240d5332908fdb7b527" kindref="member">Sum</ref>(node,<sp/>agent);<sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="namespacecowboys_1a4699134839c4da097acb078c33dfbb22" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a4699134839c4da097acb078c33dfbb22" kindref="member">Square</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>val<sp/>*<sp/>val;<sp/>});</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="namespacecowboys_1aeb3b5bb70be3dda1d0532b62b10946dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1aeb3b5bb70be3dda1d0532b62b10946dd" kindref="member">PosClamp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::max(0.,<sp/>val);<sp/>});</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="namespacecowboys_1a5080fed5f002ab8e78afecd43ba393d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a5080fed5f002ab8e78afecd43ba393d1" kindref="member">NegClamp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::min(0.,<sp/>val);<sp/>});</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="namespacecowboys_1a2121fb3254c30d5f9bc4a7174d8ee592" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a2121fb3254c30d5f9bc4a7174d8ee592" kindref="member">Sqrt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;)<sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;<sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::transform_reduce(PAR<sp/>vals.cbegin(),<sp/>vals.cend(),<sp/>0.,<sp/>std::plus{},</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)<sp/>{<sp/>return<sp/>std::sqrt(std::max(0.,<sp/>val));<sp/>});</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="namespacecowboys_1ad8a48f3c171cfe8ad9f5cb88be2a47b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1ad8a48f3c171cfe8ad9f5cb88be2a47b2" kindref="member">WallDistanceUp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_sensors_1acb5090493d7dc03d96428f5afbb8f90e" kindref="member">Sensors::wallDistance</ref>(agent.GetWorld().GetGrid(),<sp/>agent,<sp/>SensorDirection::ABOVE);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="namespacecowboys_1a32d63260d0a7deaa3a8f701a15d4e467" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a32d63260d0a7deaa3a8f701a15d4e467" kindref="member">WallDistanceDown</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_sensors_1acb5090493d7dc03d96428f5afbb8f90e" kindref="member">Sensors::wallDistance</ref>(agent.GetWorld().GetGrid(),<sp/>agent,<sp/>SensorDirection::BELOW);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="namespacecowboys_1a4a12053565d9b86d0b4debdbfcb71f6d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a4a12053565d9b86d0b4debdbfcb71f6d" kindref="member">WallDistanceLeft</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_sensors_1acb5090493d7dc03d96428f5afbb8f90e" kindref="member">Sensors::wallDistance</ref>(agent.GetWorld().GetGrid(),<sp/>agent,<sp/>SensorDirection::LEFT);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="namespacecowboys_1aedf2b19c21a7f95ef5b3c27c01405577" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1aedf2b19c21a7f95ef5b3c27c01405577" kindref="member">WallDistanceRight</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_sensors_1acb5090493d7dc03d96428f5afbb8f90e" kindref="member">Sensors::wallDistance</ref>(agent.GetWorld().GetGrid(),<sp/>agent,<sp/>SensorDirection::RIGHT);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="namespacecowboys_1a350aa3ed6791f9ad76b83458aebb876e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacecowboys_1a350aa3ed6791f9ad76b83458aebb876e" kindref="member">AStarDistance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classcowboys_1_1_graph_node" kindref="compound">GraphNode</ref><sp/>&amp;node,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cse491::AgentBase<sp/>&amp;agent)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>outputs<sp/>of<sp/>the<sp/>first<sp/>two<sp/>connections<sp/>are<sp/>the<sp/>x<sp/>and<sp/>y<sp/>coordinates<sp/>of<sp/>the<sp/>goal<sp/>position.<sp/>It&apos;d<sp/>probably<sp/>be<sp/>rare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>agents<sp/>to<sp/>randomly<sp/>use<sp/>it<sp/>in<sp/>a<sp/>useful<sp/>way.<sp/>Most<sp/>of<sp/>the<sp/>time<sp/>when<sp/>it<sp/>IS<sp/>used,<sp/>there<sp/>is<sp/>no<sp/>input<sp/>connections</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>thus<sp/>the<sp/>default<sp/>output<sp/>is<sp/>used,<sp/>so<sp/>it<sp/>isn&apos;t<sp/>REALLY<sp/>being<sp/>used.<sp/>Other<sp/>times<sp/>when<sp/>it<sp/>does<sp/>have<sp/>input</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>connections,<sp/>the<sp/>agent<sp/>has<sp/>a<sp/>lower<sp/>fitness,<sp/>so<sp/>it<sp/>probably<sp/>wasn&apos;t<sp/>making<sp/>good<sp/>use<sp/>of<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decided<sp/>to<sp/>make<sp/>an<sp/>easier<sp/>way<sp/>A*<sp/>can<sp/>be<sp/>used<sp/>by<sp/>agents<sp/>by<sp/>giving<sp/>the<sp/>A*<sp/>distance<sp/>from<sp/>the<sp/>agent&apos;s<sp/>start<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>an<sp/>input.<sp/>This<sp/>can<sp/>still<sp/>be<sp/>used<sp/>in<sp/>the<sp/>off<sp/>chance<sp/>it<sp/>is<sp/>useful.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/>node.<ref refid="classcowboys_1_1_graph_node_1ab46b326d0b92c0f7ea2549c1290a589b" kindref="member">GetInputValues</ref>&lt;2&gt;(std::array&lt;size_t,<sp/>2&gt;{0,<sp/>1});</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!vals.has_value())</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node.<ref refid="classcowboys_1_1_graph_node_1a323929db974a080afbd9409e380bd36d" kindref="member">GetDefaultOutput</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals2<sp/>=<sp/>*vals;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>goal_position<sp/>=<sp/>cse491::GridPosition(vals2[0],<sp/>vals2[1]);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>path<sp/>=<sp/>walle::GetShortestPath(agent.GetPosition(),<sp/>goal_position,<sp/>agent.GetWorld(),<sp/>agent);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path.size();</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;InnerFunction&gt;<sp/>NODE_FUNCTION_SET{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">,<sp/><sp/><ref refid="namespacecowboys_1a2f056f1a4aecb240d5332908fdb7b527" kindref="member">Sum</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1aba71998b80dfdf6f4ea2a7df48361cb5" kindref="member">And</ref>,<sp/><ref refid="namespacecowboys_1a814ec1d3ff2a1b7f5ee1814050fde1a3" kindref="member">AnyEq</ref>,<sp/><ref refid="namespacecowboys_1aa67f79467415e8b65a208e083d577b33" kindref="member">Not</ref>,<sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1a096431a5e693001753f1073d061b2a45" kindref="member">Gate</ref>,<sp/><sp/><sp/><ref refid="namespacecowboys_1a600040bf260198f6ab9b4980f0d47c9f" kindref="member">Sin</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1a23ee900029214ea7f0c0ff7a6c0ced30" kindref="member">Cos</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1a1f1ff8ef29777c707d3ed36c71321967" kindref="member">Product</ref>,<sp/><ref refid="namespacecowboys_1a829095846be4e7c7c10083198caa7af6" kindref="member">Exp</ref>,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1a26e5401ea9982262cc2807a29da8d571" kindref="member">LessThan</ref>,<sp/><ref refid="namespacecowboys_1ac87a28134c362a15afe90d9713689d68" kindref="member">GreaterThan</ref>,<sp/><ref refid="namespacecowboys_1ad73ee65cbef4ee7d663505357d6a953a" kindref="member">Max</ref>,<sp/><ref refid="namespacecowboys_1a6ddf96d02edea36a4085bad5977687e2" kindref="member">Min</ref>,<sp/><sp/><sp/><ref refid="namespacecowboys_1a613a473e8cd07e1a1ea189c43121f488" kindref="member">NegSum</ref>,<sp/><ref refid="namespacecowboys_1a4699134839c4da097acb078c33dfbb22" kindref="member">Square</ref>,<sp/><ref refid="namespacecowboys_1aeb3b5bb70be3dda1d0532b62b10946dd" kindref="member">PosClamp</ref>,<sp/><ref refid="namespacecowboys_1a5080fed5f002ab8e78afecd43ba393d1" kindref="member">NegClamp</ref>,<sp/><ref refid="namespacecowboys_1a2121fb3254c30d5f9bc4a7174d8ee592" kindref="member">Sqrt</ref>};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;InnerFunction&gt;<sp/>SENSOR_FUNCTION_SET{<ref refid="namespacecowboys_1ad8a48f3c171cfe8ad9f5cb88be2a47b2" kindref="member">WallDistanceUp</ref>,<sp/><ref refid="namespacecowboys_1a32d63260d0a7deaa3a8f701a15d4e467" kindref="member">WallDistanceDown</ref>,<sp/><ref refid="namespacecowboys_1a4a12053565d9b86d0b4debdbfcb71f6d" kindref="member">WallDistanceLeft</ref>,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacecowboys_1aedf2b19c21a7f95ef5b3c27c01405577" kindref="member">WallDistanceRight</ref>,<sp/><ref refid="namespacecowboys_1a350aa3ed6791f9ad76b83458aebb876e" kindref="member">AStarDistance</ref>};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;InnerFunction&gt;<sp/>FUNCTION_SET<sp/>=<sp/>[]()<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;InnerFunction&gt;<sp/>functions;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>functions.reserve(NODE_FUNCTION_SET.size()<sp/>+<sp/>SENSOR_FUNCTION_SET.size());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>functions.insert(functions.cend(),<sp/>NODE_FUNCTION_SET.cbegin(),<sp/>NODE_FUNCTION_SET.cend());</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>functions.insert(functions.cend(),<sp/>SENSOR_FUNCTION_SET.cbegin(),<sp/>SENSOR_FUNCTION_SET.cend());</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>functions;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}();</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cowboys</highlight></codeline>
    </programlisting>
    <location file="source/Agents/GP/GraphNode.hpp"/>
  </compounddef>
</doxygen>
