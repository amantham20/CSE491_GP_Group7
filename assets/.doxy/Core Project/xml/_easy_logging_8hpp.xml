<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_easy_logging_8hpp" kind="file" language="C++">
    <compoundname>EasyLogging.hpp</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">iostream</includes>
    <includes local="no">map</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="1">
        <label>source/core/EasyLogging.hpp</label>
        <link refid="_easy_logging_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="5">
        <label>sstream</label>
      </node>
    </incdepgraph>
    <innerclass refid="classclogged_1_1_logger" prot="public">clogged::Logger</innerclass>
    <innernamespace refid="namespaceclogged">clogged</innernamespace>
    <sectiondef kind="define">
      <memberdef kind="define" id="_easy_logging_8hpp_1ab34609478123b8b3933ccb293abd585f" prot="public" static="no">
        <name>LOGLINE</name>
        <initializer>&quot;File: &quot; &lt;&lt; __FILE__ &lt;&lt; &quot;::-&gt;::Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;)&quot;</initializer>
        <briefdescription>
<para>Ensure that we only log when NDEBUG flg is not set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/core/EasyLogging.hpp" line="53" column="9" bodyfile="source/core/EasyLogging.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_easy_logging_8hpp_1ab2693e0dbe66ba00e76be52a752be271" prot="public" static="no">
        <name>RELATIVE_PATH</name>
        <param><defname>file</defname></param>
        <initializer>  (std::string(file).find_last_of(&quot;/\\&quot;) != std::string::npos                \
       ? std::string(file).substr(std::string(file).find_last_of(&quot;/\\&quot;) + 1) \
       : std::string(file))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/core/EasyLogging.hpp" line="55" column="9" bodyfile="source/core/EasyLogging.hpp" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="define" id="_easy_logging_8hpp_1ab7d03472fa1af9220943e4c2cf431de8" prot="public" static="no">
        <name>LOG_RELLINE</name>
        <initializer>&quot;File: &quot; &lt;&lt; RELATIVE_PATH(__FILE__) &lt;&lt; &quot;::-&gt;::Line(&quot; &lt;&lt; __LINE__ &lt;&lt; &quot;)&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/core/EasyLogging.hpp" line="60" column="9" bodyfile="source/core/EasyLogging.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="_easy_logging_8hpp_1aa4a528f56d6acd71184076bac81eef24" prot="public" static="no">
        <name>LOG_FNC</name>
        <initializer>&quot;Function: &quot; &lt;&lt; __func__ &lt;&lt; &quot; &quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="source/core/EasyLogging.hpp" line="62" column="9" bodyfile="source/core/EasyLogging.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="namespaceclogged" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceclogged" kindref="compound">clogged</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref><sp/>{<sp/>DEBUG,<sp/>INFO,<sp/>WARNING,<sp/>ERR,<sp/>NA<sp/>};</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="namespaceclogged_1a9c13bb5b1d69698f9b47900990eaa598" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceclogged_1a9c13bb5b1d69698f9b47900990eaa598" kindref="member">Team</ref><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/>TEAM_1,</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>TEAM_2,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>TEAM_3,</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/>TEAM_4,</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>TEAM_5,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>TEAM_6,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>TEAM_7,</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>TEAM_8,</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>TEAM_9,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>GENERAL,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>NA</highlight></codeline>
<codeline lineno="36"><highlight class="normal">};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="namespaceclogged_1ab87bacfdad76e61b9412d7124be44c1c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespaceclogged_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>{<sp/>RESET<sp/>=<sp/>0,<sp/>BLUE<sp/>=<sp/>34,<sp/>GREEN<sp/>=<sp/>32,<sp/>RED<sp/>=<sp/>31<sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="namespaceclogged_1ae4329a3b091cf8802f792b7f5852ca39" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref><sp/><ref refid="namespaceclogged_1ae4329a3b091cf8802f792b7f5852ca39" kindref="member">LOGLEVEL</ref><sp/>=<sp/>LogLevel::DEBUG;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGLINE<sp/>&quot;File:<sp/>&quot;<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/>&quot;::-&gt;::Line(&quot;<sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/>&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RELATIVE_PATH(file)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/>(std::string(file).find_last_of(&quot;/\\&quot;)<sp/>!=<sp/>std::string::npos<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>std::string(file).substr(std::string(file).find_last_of(&quot;/\\&quot;)<sp/>+<sp/>1)<sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::string(file))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_RELLINE<sp/>&quot;File:<sp/>&quot;<sp/>&lt;&lt;<sp/>RELATIVE_PATH(__FILE__)<sp/>&lt;&lt;<sp/>&quot;::-&gt;::Line(&quot;<sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/>&quot;)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FNC<sp/>&quot;Function:<sp/>&quot;<sp/>&lt;&lt;<sp/>__func__<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"></codeline>
<codeline lineno="75" refid="classclogged_1_1_logger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="83" refid="classclogged_1_1_logger_1aa0a4a8cf7be9e0836f862cf8f762e643" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1aa0a4a8cf7be9e0836f862cf8f762e643" kindref="member">operator&lt;&lt;</ref>(<ref refid="namespaceclogged_1a9c13bb5b1d69698f9b47900990eaa598" kindref="member">Team</ref><sp/>team)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>currentTeam<sp/>=<sp/>team;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>metaPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>endl;<sp/>//TODO:<sp/>Might<sp/>have<sp/>to<sp/>enable<sp/>this<sp/>so<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>have<sp/>same<sp/>line<sp/>logging<sp/>when<sp/>endl<sp/>is<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classclogged_1_1_logger_1ab07dee0cc3b329175130e51bb6725848" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1ab07dee0cc3b329175130e51bb6725848" kindref="member">operator&lt;&lt;</ref>(<ref refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref><sp/>logLevel)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>currentLogLevel<sp/>=<sp/>logLevel;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>metaPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classclogged_1_1_logger_1a25e30019aee7797dfc1c178281c1c895" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1a25e30019aee7797dfc1c178281c1c895" kindref="member">operator&lt;&lt;</ref>(<ref refid="namespaceclogged_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>color)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>currentColor<sp/>=<sp/>color;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classclogged_1_1_logger_1a4f96fb9466837ed96a013e2448f4d661" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1a4f96fb9466837ed96a013e2448f4d661" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;(*manipulator)(std::ostream<sp/>&amp;))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;(*EndlManipulator)(std::ostream<sp/>&amp;);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compare<sp/>the<sp/>function<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(manipulator<sp/>==<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">EndlManipulator</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::endl)<sp/>||<sp/>manipulator<sp/>==<sp/><ref refid="classclogged_1_1_logger_1a010403b238c0b73135785ec11d9dda53" kindref="member">endl</ref>)<sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>std::endl<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentTeam<sp/>=<sp/>Team::NA;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentLogLevel<sp/>=<sp/>LogLevel::DEBUG;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>currentColor<sp/>=<sp/>Color::RESET;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>metaPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="152" refid="classclogged_1_1_logger_1a59bb7d54a054474c11e08365d6c6f0df" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1a59bb7d54a054474c11e08365d6c6f0df" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Define<sp/>when<sp/>to<sp/>log<sp/>by<sp/>loglevel<sp/>comparison.<sp/>Goal<sp/>is<sp/>to<sp/>send<sp/>it<sp/>in<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>flag<sp/>in<sp/>the<sp/>CMakeLists.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(currentLogLevel<sp/>&gt;=<sp/><ref refid="namespaceclogged_1ae4329a3b091cf8802f792b7f5852ca39" kindref="member">LOGLEVEL</ref>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>added<sp/>additional<sp/>flag<sp/>in<sp/>case<sp/>one<sp/>wants<sp/>to<sp/>compile<sp/>without<sp/>colors<sp/>(or)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>terminal<sp/>does<sp/>not<sp/>support<sp/>colors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>D_ANSI_COLOR_CODES</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>colorStart<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\033[&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(currentColor))<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>colorEnd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\033[0m&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>colorStart<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>colorEnd<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>logMessage;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logMessage<sp/>&lt;&lt;<sp/>colorStart;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!metaPrinted)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logMessage<sp/>&lt;&lt;<sp/>teamToString(currentTeam)<sp/>&lt;&lt;<sp/>logToString(currentLogLevel);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metaPrinted<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logMessage<sp/>&lt;&lt;<sp/>value<sp/>&lt;&lt;<sp/>colorEnd;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>logMessage.str();<sp/><sp/></highlight><highlight class="comment">//<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/>//TODO:<sp/>Might<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>make<sp/>enable<sp/>this<sp/>so<sp/>that<sp/>we<sp/>can<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>same<sp/>line<sp/>logging<sp/>when<sp/>endl<sp/>is<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="188" refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>()<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>instance;<sp/><sp/></highlight><highlight class="comment">//<sp/>Guaranteed<sp/>to<sp/>be<sp/>initialized<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>EXTRA_Ts&gt;</highlight></codeline>
<codeline lineno="202" refid="classclogged_1_1_logger_1a3e21a0ae73b2e6441da6b74560de41d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classclogged_1_1_logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classclogged_1_1_logger_1a3e21a0ae73b2e6441da6b74560de41d3" kindref="member">Log</ref>(T<sp/>&amp;&amp;arg1,<sp/>EXTRA_Ts<sp/>&amp;&amp;...extra_args)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>()<sp/>&lt;&lt;<sp/>std::forward&lt;T&gt;(arg1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>the<sp/>first<sp/>argument.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(EXTRA_Ts)<sp/>==<sp/>0)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>No<sp/>arguments<sp/>left.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>()<sp/>&lt;&lt;<sp/><ref refid="classclogged_1_1_logger_1a010403b238c0b73135785ec11d9dda53" kindref="member">Logger::endl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Trigger<sp/>a<sp/>flush.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>(std::forward&lt;EXTRA_Ts&gt;(extra_args)...);<sp/><sp/></highlight><highlight class="comment">//<sp/>Log<sp/>remaining<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="classclogged_1_1_logger_1a010403b238c0b73135785ec11d9dda53" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="classclogged_1_1_logger_1a010403b238c0b73135785ec11d9dda53" kindref="member">endl</ref>(std::ostream<sp/>&amp;os)<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>()<sp/>&lt;&lt;<sp/>std::endl;<sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>custom<sp/>Logger::endl<sp/>to<sp/>reset<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><ref refid="namespaceclogged_1a9c13bb5b1d69698f9b47900990eaa598" kindref="member">Team</ref><sp/>currentTeam<sp/>=<sp/>Team::NA;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><ref refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref><sp/>currentLogLevel<sp/>=<sp/>LogLevel::DEBUG;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="namespaceclogged_1ab87bacfdad76e61b9412d7124be44c1c" kindref="member">Color</ref><sp/>currentColor<sp/>=<sp/>Color::RESET;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>metaPrinted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>std::map&lt;Team,<sp/>std::string&gt;<sp/>teamToStringMap<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Team::TEAM_1,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>1&quot;</highlight><highlight class="normal">},<sp/><sp/>{Team::TEAM_2,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>2&quot;</highlight><highlight class="normal">},<sp/>{Team::TEAM_3,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>3&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Team::TEAM_4,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>4&quot;</highlight><highlight class="normal">},<sp/><sp/>{Team::TEAM_5,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>5&quot;</highlight><highlight class="normal">},<sp/>{Team::TEAM_6,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>6&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Team::TEAM_7,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>7&quot;</highlight><highlight class="normal">},<sp/><sp/>{Team::TEAM_8,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>8&quot;</highlight><highlight class="normal">},<sp/>{Team::TEAM_9,<sp/></highlight><highlight class="stringliteral">&quot;Team<sp/>9&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{Team::GENERAL,<sp/></highlight><highlight class="stringliteral">&quot;General&quot;</highlight><highlight class="normal">}};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>std::string<sp/>teamToString(<ref refid="namespaceclogged_1a9c13bb5b1d69698f9b47900990eaa598" kindref="member">Team</ref><sp/>team)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/>teamToStringMap.find(team);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>teamToStringMap.end())<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/>it-&gt;second<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>std::string<sp/>logToString(<ref refid="namespaceclogged_1aca1fd1d8935433e6ba2e3918214e07f9" kindref="member">LogLevel</ref><sp/>logLevel)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logLevel<sp/>==<sp/>LogLevel::DEBUG)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(DEBUG)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logLevel<sp/>==<sp/>LogLevel::INFO)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(INFO)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logLevel<sp/>==<sp/>LogLevel::WARNING)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(WARNING)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(logLevel<sp/>==<sp/>LogLevel::ERR)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(ERROR)<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal">};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGLINE<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_RELLINE<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOG_FNC<sp/>&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#define<sp/>log<sp/>Log()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Logger<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>Logger<sp/>&amp;<ref refid="classclogged_1_1_logger_1aa0a4a8cf7be9e0836f862cf8f762e643" kindref="member">operator&lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<sp/></highlight><highlight class="comment">/*value*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>Logger<sp/>&amp;<ref refid="classclogged_1_1_logger_1aa0a4a8cf7be9e0836f862cf8f762e643" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;(*<sp/></highlight><highlight class="comment">/*manipulator*/</highlight><highlight class="normal">)(std::ostream<sp/>&amp;))<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="classclogged_1_1_logger_1a010403b238c0b73135785ec11d9dda53" kindref="member">endl</ref>(std::ostream<sp/>&amp;os)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;<sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Logger<sp/>&amp;<ref refid="classclogged_1_1_logger_1ad932a82622b1afa81c601a51527b7eca" kindref="member">Log</ref>()<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Logger<sp/>instance;<sp/><sp/></highlight><highlight class="comment">//<sp/>Guaranteed<sp/>to<sp/>be<sp/>initialized<sp/>only<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>instance;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal">};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Logger<sp/>Logger::log;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>clogged</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="source/core/EasyLogging.hpp"/>
  </compounddef>
</doxygen>
