{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"How-To Guides","text":"<p>Below are a set of guides for how to develop your own modules and joining them together into an executable (potentially with additional analysis and data collection.)</p> <ul> <li> <p>How to compile - Walks through how to compile via CMake.</p> </li> <li> <p>How to Build an Agent - A guide to designing your own type of autonomous agent.</p> </li> <li> <p>How to Build a World - A guide to designing you own world with custom interaction modes among agents and other environmental properties.</p> </li> <li> <p>How to Build an Interface - How to build an interface that allows a human user to control an agent.</p> </li> <li> <p>How to Assemble a <code>main()</code> function - A guide to selecting worlds, agents, and interfaces and turning them into a custom executable (including how to collect data about the resulting system.)</p> </li> <li> <p>How to build, run, and create unit tests - Walks through how to build and run existing unit tests, as well as create new unit test files. </p> </li> </ul>"},{"location":"HowToAssembleAMain/","title":"How to Assemble a Main","text":"<p>Once you have your Agents, World, and Interface picked out, it's easy to assemble them into an <code>main()</code> function that you can turn into a working executable.</p> <p>Create the appropriate .cpp file, and follow these steps:</p> <ol> <li>Include all of the modules that you will be using.  In the case of <code>simple_main.cpp</code> this looks like:</li> </ol> <pre><code>#include \"Agents/PacingAgent.hpp\"\n#include \"Interfaces/TrashInterface.hpp\"\n#include \"Worlds/MazeWorld.hpp\"\n</code></pre> <ol> <li>Inside your <code>main()</code> function, start by building your world.  It should look something like:</li> </ol> <pre><code>main() {\n  cse491::MazeWorld world;\n</code></pre> <p>Some world types may be able to take arguments to their constructors, but most probably won't.</p> <ol> <li>Add in your agents using the <code>AddAgent</code> member function, specifying the type of agent with a template argument and the agent's name as a regular argument.  <code>AddAgent</code> will return a reference to the new agent, so you can immediately modify it, such as by setting its position.</li> </ol> <pre><code>  world.AddAgent&lt;cse491::PacingAgent&gt;(\"Pacer 1\").SetPosition(3,1);\n  world.AddAgent&lt;cse491::PacingAgent&gt;(\"Pacer 2\").SetPosition(6,1);\n</code></pre> <p>Furthermore, AddAgent can take additional parameters to set properties BEFORE configuration is run. For example, if you want to set stats for strength and speed, you could do something like:</p> <pre><code>  world.AddAgent&lt;cse491::PacingAgent&gt;(\"Pacer 1\", \"strength\", 1.0, \"speed\", 5.5).SetPosition(3,1);\n  world.AddAgent&lt;cse491::PacingAgent&gt;(\"Pacer 2\", \"strength\", 8.6, \"speed\", 1.2).SetPosition(6,1);\n</code></pre> <p>This will allow you to change what you do in agent configuration based on the properties provided.</p> <ol> <li>Add in your interface as a type of agent.  For example:</li> </ol> <pre><code>  world.AddAgent&lt;cse491::TrashInterface&gt;(\"Interface\").SetProperty(\"char\", '@');\n</code></pre> <p>This will set up any \"player\" characters.</p> <ol> <li>Launch the run using <code>world.Run();</code>.</li> </ol>"},{"location":"HowToAssembleAMain/#what-if-i-want-to-collect-extra-data-for-analysis","title":"What if I want to collect extra data for analysis?","text":"<p>If you want to track the agents and the world during a run, you will skip step 5 above and instead manually run the agents and update the world, collecting data as you go.</p> <p>For example, in place of <code>world.Run();</code> you could have:</p> <pre><code>  while (!world.GetRunOver()) {\n    world.RunAgents();\n    world.UpdateWorld();\n    // Collect extra data about the world here!\n  }\n</code></pre> <p>You should have access to all of the basic data in the world; we may need to expand the API to provide access if you don't have everything you need.</p>"},{"location":"HowToBuildAWorld/","title":"How to Build A World","text":"<p>When building your own world, the first steps are boilerplate:</p> <ol> <li> <p>Include the WorldBase file If you're in the Worlds/ directory, do this with: <code>#include \"../core/WorldBase.hpp\"</code></p> </li> <li> <p>Open your namespace.  Everything else you do should be done in your team's namespace.</p> </li> <li> <p>Build your world class, making sure to derive it from <code>WorldBase</code>.  Something like <code>class MYWorld : public WorldBase {</code>, but of course use your world name instead of \"MYWorld\".</p> </li> </ol> <p>In the private (or protected, if you prefer) section of the class, you may create any member variables that your world might use.  Additionally, you need to set up some internal functionality.  Specifically:</p> <ol> <li> <p>Create a enumeration where you will list all of the action types available to an agent.  The first action should always be a \"do nothing\" action and explicitly set to zero.  For example: <code>enum ActionType { REMAIN_STILL=0, MOVE_UP, MOVE_DOWN, MOVE_LEFT, MOVE_RIGHT };</code></p> </li> <li> <p>Add a <code>ConfigAgent</code> function that provides a new agent with a list of the actions that it has available.  For example:</p> </li> </ol> <pre><code>    /// Provide the agent with movement actions.\n    void ConfigAgent(AgentBase &amp; agent) override {\n      agent.AddAction(\"up\", MOVE_UP);\n      agent.AddAction(\"down\", MOVE_DOWN);\n      agent.AddAction(\"left\", MOVE_LEFT);\n      agent.AddAction(\"right\", MOVE_RIGHT);\n    }\n</code></pre> <p>In the public section of the class, you need to build a few more functions:</p> <ol> <li>A default constructor (i.e., <code>MYWorld() { ... }</code>).  You should do any normal set up for this world, including the member variables that you created above.  You should also specify the type options and initialize the <code>main_grid</code> for this world.</li> <li>Specify the type options with the <code>AddCellType</code> function, which is defined in the base class.     <code>AddCellType(\"dirt\", \"Regular ground\", ' ');     AddCellType(\"tree\", \"A tall tree\", '^');     AddCellType(\"river\", \"Flowing water\", '~');</code></li> <li> <p>An easy way to initialize the <code>main_grid</code> is to use the <code>Read()</code> member function on <code>WorldGrid</code> to load the grid from a file.  For example: <code>main_grid.Read(\"../assets/grids/MYWorld.grid\", type_options);</code></p> </li> <li> <p>Add a destructor (i.e., <code>~MYWorld() { ... }</code>).  This function only needs to have a body if you need to clean up one of the member variables you added.</p> </li> <li> <p>Build <code>int DoAction(AgentBase &amp; agent, size_t action_id) override { ... }</code> for your new world.  This function will be run automatically whenever an agent takes an action, specifying both the agent and action involved.</p> </li> </ol> <p>Finally you need to build a main file that initializes this world, add any needed agents (either autonomous agents or interfaces), and run.</p>"},{"location":"HowToBuildAWorld/#member-variables-inherited-from-worldbase","title":"Member variables inherited from <code>WorldBase</code>","text":"<p><code>WorldBase</code> has a lot of boilerplate functionality though almost all of it can be replaced in a derived world.</p> <p>There are five member variables maintained in the world: - <code>WorldGrid main_grid</code> - the \"main\" world that is passed to agents by default.  You may maintain additional grids if you choose, and may decide which one of these is seen by an agent. - <code>type_options_t type_options</code> - a vector of <code>CellType</code> information, which specifies the name of each cell, its description, and an (optional) ASCII symbol associated with it.  The position in this vector it he ID of a cell type. - <code>item_set_t item_set</code> - a vector of pointers to all of the \"items\" in this world.  The world can define and use items however it likes, though they should be type <code>cse491::Entity</code>.  Like agents, items can have arbitrary properties. - <code>agent_set_t agent_set</code> - a vector of all agents currently active in the world. - <code>bool run_over</code> - a value that defaults to false, but if you change it to true the run will terminate at the end of the current iteration.</p>"},{"location":"HowToBuildAWorld/#working-with-properties","title":"Working with properties","text":"<p>Agents can have arbitrarily named properties; worlds can add properties to the agents, and modify the (<code>double</code>) value associated with that property at any time.</p> <p>To add a property, simply give it a value, such as <code>agent.SetProperty(\"property_name\", value)</code> where <code>value</code> is a floating point number (it will default to 0.0 if you don't include it.)  This might be a good way to add \"hit points\" or \"size\" to agents.  You can alter what happens to an agent based on these properties; if an agent's hit points reach zero, you might kill it off.</p> <p>You can always set properties to new values later, or use <code>agent.HasProperty(\"property_name\")</code> to test if an agent has a property or <code>agent.GetProperty(\"property_name\")</code> to read its value.</p> <p>If at any point you want to remove a property, you can do so with <code>agent.RemoveProperty(\"property_name\")</code>.  For example, you might have a property called \"invisible\" that you add to an agent when it vanishes, but you remove when it reappears.</p> <p>For properties that you want agents to always possess, it's probably a good idea to set them in the <code>ConfigAgent()</code> function.</p>"},{"location":"HowToBuildAWorld/#providing-limited-data-to-agents","title":"Providing limited data to agents","text":"<p>Some worlds will want to provide agents with limited data, perhaps only showing rooms that the agent is currently in or items/agents nearby. To do this, the world will be responsible for producing or maintaining the alternate data structures and those are the ones that should be passed to agents when they are called.</p> <p>The default version of the function <code>WorldBase::RunAgents()</code> will use the full information provided in the world, but this is a virtual function.  If you override it in your derived class, you simply need to step through all of the agents and run <code>SelectAction</code> on each with the revised arguments.  (Of course, after each action is selected, make sure to also run <code>DoAction</code> and <code>SetActionResult</code> for each, as per the base class.)</p>"},{"location":"HowToBuildAWorld/#managing-non-agent-activities-in-the-world","title":"Managing non-agent activities in the world","text":"<p>In some worlds, you may want events happening in the background, independent of agents.  For example, crops might grow, seasons might change, or weather might occur. To manage these non-agent events, you simply need to override <code>UpdateWorld()</code> in your derived class.  Every time each agent is run (in the <code>Run()</code> function) UpdateWorld() is then called.  If you need a different balance for <code>UpdateWorld()</code> (perhaps you need it to go after every agent) simply override the Run() function in your derived World class.</p>"},{"location":"HowToBuildAnAgent/","title":"How to Build an Autonomous Agent","text":"<p>When building your own agent, the first steps are boilerplate:</p> <ol> <li> <p>Include the AgentBase file If you're in the Agents/ directory, do this with: <code>#include \"../core/AgentBase.hpp\"</code></p> </li> <li> <p>Open your namespace.  Everything else you do should be done in your team's namespace.</p> </li> <li> <p>Build your agent class, making sure to derive it from <code>AgentBase</code>.  Something like <code>class MYAgent : public AgentBase {</code>, but of course use your agent name instead of \"MYAgent\".</p> </li> </ol> <p>In the private (or protected, if you prefer) section of the class, you may create any member variables that your agent might use.  Remember that you also have the option of using agent properties (see below) instead of private variables if you want the values to be accessible to other modules.</p> <p>In the public section, you should create:</p> <ol> <li> <p>A constructor and destructor, as needed for your implementation (agents are not required to have any specific code here.)</p> </li> <li> <p>An Initialize function that gets run after the agent has been configured by the world.  This will allow an agent to set itself up based on the actions that were provided by the world.  This function has the format <code>bool Initialize() override {...}</code> and should return <code>false</code> if it detected a problem during initialization (such as a required action name is not available).</p> </li> <li> <p>A <code>SelectAction</code> function that identifies the action that the organism will take. The format for <code>SelectionAction</code> is:</p> </li> </ol> <pre><code>    size_t SelectAction(const WorldGrid &amp; grid,\n                        const type_options_t &amp; type_options,\n                        const item_set_t &amp; item_set,\n                        const agent_set_t &amp; agent_set) override\n    {\n      // An agent should use their current state as well as the provided\n      // grid, type_options, item_set, and agent set to decide next action.\n    }\n</code></pre> <p>The arguments passed in to <code>SelectAction</code> will be the full set of possibilities by default (i.e., the full grid, all type options, all items, and all agents), but some worlds may choose to maintain more limited versions of these variables containing only what an organism currently knows about.  In such cases it would be these more limited version that would be passed in to the function.</p> <p>As part of their current state, agents have two relevant member variables inherited from their base class.  (1) A map of strings to action IDs called <code>action_map</code>, that indicates which value to return to take an action by a given name, and (2) an <code>int</code> called <code>action_result</code> that indicates the results of their last action.  Usually <code>action_result</code> will be 1 or 0 to indicate success or failure of that action.</p>"},{"location":"HowToBuildAnAgent/#agent-properties","title":"Agent Properties","text":"<p>While properties are typically added to agents from a World, they are technically allowed to add properties to themselves, typically in their own constructor.  These properties might be ones that affect the behavior of the agents, but should also be accessible from outside of the Agent class itself.</p> <p>For example, you might want to put <code>double facing = 1.0;</code> inside the private section if facing should only ever be used by this class.  Alternatively you can put <code>SetProperty(\"facing\", 1.0);</code> in the constructor if you want it accessible to the world.  Any other class would be able to run <code>agent.HasProperty(\"facing\")</code> to determine if the property exists in <code>agent</code>, or <code>agent.GetProperty(\"facing\")</code> to retrieve its value.</p>"},{"location":"HowToBuildAnInterface/","title":"How to Build an Interface","text":"<p>When building your own interface, the first steps are boilerplate:</p> <ol> <li> <p>Include the InterfaceBase file If you're in the Interfaces/ directory, do this with: <code>#include \"../core/InterfaceBase.hpp\"</code></p> </li> <li> <p>Open your namespace.  Everything else you do should be done in your team's namespace.</p> </li> <li> <p>Build your Interface class, making sure to derive it from <code>InterfaceBase</code>.  Something like <code>class MYInterface : public InterfaceBase {</code>, but of course use your Interface name instead of \"MYInterface\".</p> </li> </ol> <p>In the private (or protected, if you prefer) section of the class, you may create any member functions or variables that your interface might use.  I recommend a series of helper functions, such as a <code>DrawGrid</code> function to display the current state of the world.</p> <p>In the public section, you should create:</p> <ol> <li> <p>A constructor and destructor, as needed for your implementation.  Interfaces will likely need to do substantial setup in the constructor and teardown in the destructor.</p> </li> <li> <p>Add an Initialize function. This gets run after the interface has been configured by the world, thus you will have access to all of the available actions in order to map them to buttons or other inputs.  This function has the format <code>bool Initialize() override {...}</code> and should return <code>true</code> as long as everything initialized correctly (false otherwise).</p> </li> <li> <p>A <code>SelectAction</code> function that presents to the user the current state of the world and then reports back the next action for the user's agent should take. The format for <code>SelectionAction</code> is:</p> </li> </ol> <pre><code>    size_t SelectAction(const WorldGrid &amp; grid,\n                        const type_options_t &amp; type_options,\n                        const item_set_t &amp; item_set,\n                        const agent_set_t &amp; agent_set) override\n    {\n      // An interface should keep track of the user's actions and report them\n      // back.  If the system is not supposed to wait for the user (i.e., real\n      // time) then return a zero any time the user has not selected an action.\n    }\n</code></pre> <p>The arguments passed in to <code>SelectAction</code> will be the full set of possibilities by default (i.e., the full grid, all type options, all items, and all agents), but some worlds may choose to maintain more limited versions of these variables containing only what an organism currently knows about.  In such cases it would be these more limited version that would be passed in to the function.</p> <p>As part of their current state, agents have two relevant member variables inherited from their base class.  (1) A map of strings to action IDs called <code>action_map</code>, that indicates which value to return to take an action by a given name, and (2) an <code>int</code> called <code>action_result</code> that indicates the results of their last action.  Usually <code>action_result</code> will be 1 or 0 to indicate success or failure of that action.</p>"},{"location":"HowToCompile/","title":"How to Compile","text":"<p>First you'll need to clone the repo with submodules. </p> <p>If you haven't yet cloned the repo, run: </p> <pre><code>git clone https://github.com/MSU-CSE491/cse_491_fall_2023.git --recursive\n</code></pre> <p>If you have already cloned the repo, but you need to download the submodules, run the following inside the repo's directory:</p> <pre><code>git submodule init\ngit submodule update\n</code></pre> <p>Now jump to the section for your operating system.</p>"},{"location":"HowToCompile/#compiling-under-linux","title":"Compiling under Linux","text":"<p>If you're on a Linux machine, you first need to download some dependencies for SFML.  Specifically, you need:  - freetype - x11 - xrandr - udev - opengl - flac - ogg - vorbis - vorbisenc - vorbisfile - openal - pthread</p> <p>If you're on Ubuntu or other similar Debian distro, you can run the following: </p> <pre><code>sudo apt install libX-dev\n</code></pre> <p>For library X. </p> <p>Once you have all dependencies downloaded, navigate to the root of the repo and run the following to build: </p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\n</code></pre> <p>All compiled executables should be in the <code>/build/executables/</code> directory. </p>"},{"location":"HowToCompile/#compiling-under-macos","title":"Compiling under MacOS","text":"<p>Mac shouldn't require any additional dependencies, so simply run the following, starting at the root of the repo:</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build .\n</code></pre> <p>All compiled executables should be in the <code>/build/executables/</code> directory. </p>"},{"location":"HowToCompile/#compiling-under-windows-with-mingw","title":"Compiling under Windows with MinGW","text":"<p>After you have the repo and submodules downloaded, we need to ensure you have MinGW and CMake. In a command line window, try running <code>g++</code> and <code>cmake</code>, if either give a \"command not found\" message, then we need to install them. </p> <p>MinGW gives us g++, and can be downloaded here: https://winlibs.com/</p> <p>CMake can be downloaded from here: https://cmake.org/download/</p> <p>Note: You'll likely need to add both MinGW's and CMake's <code>bin</code> folder to your path (I think CMake has a <code>bin</code> directory, otherwise add whatever directory contains the executable).  To add a directory to your path, follow these instructions: https://www.architectryan.com/2018/03/17/add-to-the-path-on-windows-10/ Note that you may run into issues if the directories you're adding have spaces in their paths (e.g., \"C:\\Program Files...\" was giving me issues). If you run into this, I'd recommend creating a new directory on your <code>C:\\</code> drive, like <code>C:\\bin\\</code> and then add CMake and MinGW as subdirectories there. </p> <p>Once you have CMake and MinGW working in your terminal (note you'll have to restart cmd/VSCode/whatever to get the path changes to take effect), run the following from the root of your repo:</p> <pre><code>mkdir build\ncd build\ncmake -G \"MinGW Makefiles\" ..\ncmake --build .\n</code></pre> <p>All compiled executables should be in the <code>/build/executables/</code> directory. </p> <p>Note that if you tried to build using CMake before, it likely tried to use MSVC as a compiler. If so, just wipe the build folder and start fresh. </p>"},{"location":"HowToCompile/#how-to-compile-in-debug-mode","title":"How to compile in debug mode","text":"<p>To compile in debug mode, simply add <code>-DCMAKE_BUILD_TYPE=Debug</code> to the first cmake command. </p> <p>This would normally look like: </p> <pre><code>cmake -DCMAKE_BUILD_TYPE=Debug ..\n</code></pre> <p>Unless you're on Windows, which would be:</p> <pre><code>cmake -DCMAKE_BUILD_TYPE=Debug -G \"MinGW Makefiles\" ..\n</code></pre> <p>You can then build like normal. </p> <p>Note that you can also replace <code>Debug</code> with <code>Release</code> to compile with optimizations. </p>"},{"location":"HowToTest/","title":"HowToTest","text":"<p>This guide will demonstrate how to create, build, and run tests.</p> <p>Note: that these instructions should work on Mac and Linux systems. Windows instructions should be similar, but please add any information about working with tests on Windows via a pull request! </p> <p>Note: this guide assumes you have Catch2 downloaded.  If you haven't yet downloaded the repo, simply add a <code>--recursive</code> to the end of your <code>git clone</code>.  If you have downloaded the rest of the repo, simply initialize and update the submodules: </p> <pre><code>git submodule init\ngit submodule update\n</code></pre>"},{"location":"HowToTest/#how-to-compile-tests","title":"How to compile tests","text":"<p>First, navigate to the <code>tests</code> directory. </p> <pre><code>cd tests\n</code></pre> <p>Create a build directory within <code>tests</code>, if it does not already exist.</p> <pre><code>mkdir build\n</code></pre> <p>Note that this will likely through an error/warning if the directory already exists. </p> <p>Navigate into the <code>build</code> directory. </p> <pre><code>cd build\n</code></pre> <p>Now we need to use CMake to compile. This is a two step process. First we tell CMake where to find the files, relative to our current directory. </p> <pre><code>cmake ..\n</code></pre> <p>If that completes without errors, we can now build the files in our current directory. </p> <pre><code>cmake --build .\n</code></pre> <p>That should compile the unit tests.  Note that this process will take a while the first time as it needs to compile Catch2. It should be much faster in subsequent builds. </p>"},{"location":"HowToTest/#running-tests","title":"Running tests","text":"<p>If you are on a Mac or Linux system and wish to run all the unit tests, simply run </p> <pre><code>./run_tests.sh\n</code></pre> <p>from within the <code>build</code> directory (not just in <code>tests</code>). </p> <p>If you wish to run a particular test (or are on Windows), simply navigate to the test within the build directory.  For example, if we want to run tests for <code>WorldGrid</code> (which is in core), we would navigate like so: </p> <pre><code>cd unit/core\n</code></pre> <p>Once we're in the correct directory, we simply run the executable.  On Unix systems that looks like: </p> <pre><code>./tests-unit-core-WorldGrid\n</code></pre> <p>On Windows it should be similar, though it may have a <code>.exe</code> extension.</p>"},{"location":"HowToTest/#adding-new-tests","title":"Adding new tests","text":"<p>To add tests for a new file, navigate to the corresponding folder in the <code>tests/unit</code> directory (not in <code>tests/build</code>.  For example, if we want to add a test for a new file in <code>core</code>, from the root of the repo we would navigate like so: </p> <pre><code>cd tests/unit/core\n</code></pre> <p>Once in the correct directory we need to add the actual source code of the test.  This should be done as a new <code>.cpp</code> file, which will typically have the same name as the header file in source (e.g., <code>WorldGrid.hpp</code> will have a new test file called <code>WorldGrid.cpp</code>). </p> <p>Once you've created that file, you can start with this skeleton code: </p> <pre><code>/**\n * This file is part of the Fall 2023, CSE 491 course project.\n * @brief &lt;TODO&gt;\n **/\n\n// Catch2 \n#define CATCH_CONFIG_MAIN\n#include &lt;catch2/catch_all.hpp&gt;\n\n// Class project\n// Place your includes here\n// e.g., #include \"core/Data.hpp\"\n\nTEST_CASE(\"NAME\", \"[tags]\"){\n}\n\n</code></pre> <p>Finally, once you have some tests coded up, you need to make one more change.  Simply add the name of that file (including the <code>.cpp</code>!) to <code>targets.txt</code>.  CMake uses this file to ensure we compile the appropriate files. </p>"},{"location":"Core%20Project/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace cse491 A base class interface for all agent types. <ul> <li>class AgentBase </li> <li>struct CellType Simple data structure to hold info about a TYPE of cell in the world. </li> <li>class CoreObject </li> <li>class Entity <ul> <li>struct Property </li> <li>struct PropertyBase </li> </ul> </li> <li>class GridPosition Represents a position within a 2D grid of cells. This class provides utilities to manage a position in 2D space. The position is stored as floating-point values (to allow for smooth motion through a grid), but is easily converted to size_t for grid-cell identification. </li> <li>class InterfaceBase </li> <li>class WorldBase </li> <li>class WorldGrid A common interface class for core objects that sets up required functionality. This class ensures that objects can be serialized (saved), deserialized (restored) and provides helper functions. </li> </ul> </li> </ul>"},{"location":"Core%20Project/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir source <ul> <li>dir core <ul> <li>file AgentBase.hpp </li> <li>file CoreObject.hpp </li> <li>file Data.hpp </li> <li>file Entity.hpp </li> <li>file GridPosition.hpp </li> <li>file InterfaceBase.hpp </li> <li>file WorldBase.hpp </li> <li>file WorldGrid.hpp </li> </ul> </li> </ul> </li> </ul>"},{"location":"Core%20Project/namespacecse491/","title":"Namespace cse491","text":"<p>Namespace List &gt; cse491</p> <p>A base class interface for all agent types. More...</p>"},{"location":"Core%20Project/namespacecse491/#classes","title":"Classes","text":"Type Name class AgentBase struct CellType Simple data structure to hold info about a TYPE of cell in the world. class CoreObject class Entity class GridPosition Represents a position within a 2D grid of cells. This class provides utilities to manage a position in 2D space. The position is stored as floating-point values (to allow for smooth motion through a grid), but is easily converted to size_t for grid-cell identification. class InterfaceBase class WorldBase class WorldGrid A common interface class for core objects that sets up required functionality. This class ensures that objects can be serialized (saved), deserialized (restored) and provides helper functions."},{"location":"Core%20Project/namespacecse491/#public-types","title":"Public Types","text":"Type Name typedef std::vector&lt; std::unique_ptr&lt; AgentBase &gt; &gt; agent_set_t Sets of agents will be represented as vectors of pointers to the base class. typedef std::vector&lt; std::unique_ptr&lt; Entity &gt; &gt; item_set_t Sets of items will be represented as vectors of pointers to the base class. typedef std::vector&lt; CellType &gt; type_options_t Available CellTypes will be passed around as a vector of options."},{"location":"Core%20Project/namespacecse491/#detailed-description","title":"Detailed Description","text":"<p>A simple 2D Grid container.</p> <p>A base class for all World modules.</p> <p>A base class for all player-interface types.</p> <p>A mechanism of identifying a grid cell, as well as a position within the cell.</p> <p>A base class for all items or agents that can exist on the grid.</p> <p>Set of types used throughout the codebase.</p> <p>A common interface class for core objects that sets up required functionality.</p> <p>This file is part of the Fall 2023, CSE 491 course project. </p> <p>Note:</p> <p>Status: PROPOSAL</p> <p>This file is part of the Fall 2023, CSE 491 course project. </p> <p>Note:</p> <p>Status: PROPOSAL</p> <p>This CoreObject class builds an interface for all of the core object, ensuring that they can be properly serialized.</p> <p>Derived classes must implement: GetTypeName_impl() - To return the qualified type name. Serialize_impl() - To store the object in a stream. Deserialize_impl() - To restore the object from a stream. </p>"},{"location":"Core%20Project/namespacecse491/#public-types-documentation","title":"Public Types Documentation","text":""},{"location":"Core%20Project/namespacecse491/#typedef-agent_set_t","title":"typedef agent_set_t","text":"<pre><code>using agent_set_t =  std::vector&lt;std::unique_ptr&lt;AgentBase&gt; &gt;;\n</code></pre>"},{"location":"Core%20Project/namespacecse491/#typedef-item_set_t","title":"typedef item_set_t","text":"<pre><code>using item_set_t =  std::vector&lt;std::unique_ptr&lt;Entity&gt; &gt;;\n</code></pre>"},{"location":"Core%20Project/namespacecse491/#typedef-type_options_t","title":"typedef type_options_t","text":"<pre><code>using type_options_t =  std::vector&lt;CellType&gt;;\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/AgentBase.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_agent_base/","title":"Class cse491::AgentBase","text":"<p>ClassList &gt; cse491 &gt; AgentBase</p> <p>Inherits the following classes: cse491::Entity</p> <p>Inherited by the following classes: cse491::InterfaceBase</p>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#public-functions","title":"Public Functions","text":"Type Name virtual AgentBase &amp; AddAction (const std::string &amp; action_name, size_t action_id) Provide a new action that this agent can take. AgentBase (size_t id, const std::string &amp; name)  size_t GetActionID (const std::string &amp; action_name) constReturn an action ID if that action exists, otherwise return zero. int GetActionResult () constRetrieve the result of the most recent action. bool HasAction (const std::string &amp; action_name) constTest if agent already has a specified action. virtual bool Initialize () Run AFTER the world configures the agent, for additional tests or setup. virtual bool IsAgent () override constIs this Entity actually an autonomous agent? (Overridden inAgentBase to return true) virtual size_t SelectAction (const WorldGrid &amp; grid, const type_options_t &amp; type_options, const item_set_t &amp; item_set, const agent_set_t &amp; agent_set) Decide the next action for this agent to perform; should be overridden! void SetActionResult (int result) Update the result from the most recent action. ~AgentBase () = default"},{"location":"Core%20Project/classcse491_1_1_agent_base/#public-functions-inherited-from-cse491entity","title":"Public Functions inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name Entity (size_t id, const std::string &amp; name)  Entity (const Entity &amp;) = delete Entity (Entity &amp;&amp;) = default size_t GetID () const const std::string &amp; GetName () const GridPosition GetPosition () const const T &amp; GetProperty (const std::string &amp; name) constReturn the current value of the specified property. bool HasProperty (const std::string &amp; name) constDoes this agent have a property with the specified name? virtual bool IsAgent () constIs this Entity actually an autonomous agent? (Overridden inAgentBase to return true) virtual bool IsInterface () const Entity &amp; RemoveProperty (const std::string &amp; name) Completely remove a property from an Entity . Entity &amp; SetName (const std::string in_name)  Entity &amp; SetPosition (GridPosition in_pos)  Entity &amp; SetPosition (double x, double y)  Entity &amp; SetProperties () Allow for setting multiple properties at once. Entity &amp; SetProperties (const std::string &amp; name, VALUE_T &amp;&amp; value, EXTRA_Ts &amp;&amp;... extras)  Entity &amp; SetProperty (const std::string &amp; name, const T &amp; value) Change the value of the specified property (will create if needed) Entity &amp; operator= (const Entity &amp;) = delete Entity &amp; operator= (Entity &amp;&amp;) = delete virtual ~Entity () = default"},{"location":"Core%20Project/classcse491_1_1_agent_base/#protected-attributes","title":"Protected Attributes","text":"Type Name std::unordered_map&lt; std::string, size_t &gt; action_map A map of names to IDs for each available action. int action_result   = =1Usually a one (success) or zero (failure)."},{"location":"Core%20Project/classcse491_1_1_agent_base/#protected-attributes-inherited-from-cse491entity","title":"Protected Attributes inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name const size_t id Unique ID for this entity. std::string name Name for this entity (E.g., \"Player 1\" or \"+2 Sword\") GridPosition position Where on the grid is this entity? std::unordered_map&lt; std::string, std::unique_ptr&lt; PropertyBase &gt; &gt; property_map Every entity can have a simple set of properties (with values) associated with it."},{"location":"Core%20Project/classcse491_1_1_agent_base/#protected-functions-inherited-from-cse491entity","title":"Protected Functions inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name Property&lt; T &gt; &amp; AsProperty (const std::string &amp; name) const"},{"location":"Core%20Project/classcse491_1_1_agent_base/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-addaction","title":"function AddAction","text":"<pre><code>inline virtual AgentBase &amp; cse491::AgentBase::AddAction (\n    const std::string &amp; action_name,\n    size_t action_id\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-agentbase","title":"function AgentBase","text":"<pre><code>inline cse491::AgentBase::AgentBase (\n    size_t id,\n    const std::string &amp; name\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-getactionid","title":"function GetActionID","text":"<pre><code>inline size_t cse491::AgentBase::GetActionID (\n    const std::string &amp; action_name\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-getactionresult","title":"function GetActionResult","text":"<pre><code>inline int cse491::AgentBase::GetActionResult () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-hasaction","title":"function HasAction","text":"<pre><code>inline bool cse491::AgentBase::HasAction (\n    const std::string &amp; action_name\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-initialize","title":"function Initialize","text":"<p>Run AFTER the world configures the agent, for additional tests or setup. </p> <pre><code>inline virtual bool cse491::AgentBase::Initialize () \n</code></pre> <p>Returns:</p> <p>Was the initialization successful? </p>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-isagent","title":"function IsAgent","text":"<pre><code>inline virtual bool cse491::AgentBase::IsAgent () override const\n</code></pre> <p>Implements cse491::Entity::IsAgent</p>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-selectaction","title":"function SelectAction","text":"<p>Decide the next action for this agent to perform; should be overridden! </p> <pre><code>inline virtual size_t cse491::AgentBase::SelectAction (\n    const WorldGrid &amp; grid,\n    const type_options_t &amp; type_options,\n    const item_set_t &amp; item_set,\n    const agent_set_t &amp; agent_set\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>grid</code> The agent is provided with the current WorldGrid </li> </ul> <p>Returns:</p> <p>ID associated with the action to perform; (zero is always \"no action\") </p>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-setactionresult","title":"function SetActionResult","text":"<pre><code>inline void cse491::AgentBase::SetActionResult (\n    int result\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#function-agentbase_1","title":"function ~AgentBase","text":"<pre><code>cse491::AgentBase::~AgentBase () = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_agent_base/#variable-action_map","title":"variable action_map","text":"<pre><code>std::unordered_map&lt;std::string, size_t&gt; action_map;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_agent_base/#variable-action_result","title":"variable action_result","text":"<pre><code>int action_result;\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/AgentBase.hpp</code></p>"},{"location":"Core%20Project/structcse491_1_1_cell_type/","title":"Struct cse491::CellType","text":"<p>ClassList &gt; cse491 &gt; CellType</p> <p>Simple data structure to hold info about a TYPE of cell in the world. </p> <ul> <li><code>#include &lt;Data.hpp&gt;</code></li> </ul>"},{"location":"Core%20Project/structcse491_1_1_cell_type/#public-attributes","title":"Public Attributes","text":"Type Name std::string desc Full description of what this type of cell is. std::string name Unique name for this type of cell (e.g., \"wall\", \"tree\", \"moon\") char symbol Symbol for text representations (files or interface)"},{"location":"Core%20Project/structcse491_1_1_cell_type/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Core%20Project/structcse491_1_1_cell_type/#variable-desc","title":"variable desc","text":"<pre><code>std::string desc;\n</code></pre>"},{"location":"Core%20Project/structcse491_1_1_cell_type/#variable-name","title":"variable name","text":"<pre><code>std::string name;\n</code></pre>"},{"location":"Core%20Project/structcse491_1_1_cell_type/#variable-symbol","title":"variable symbol","text":"<pre><code>char symbol;\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/Data.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_core_object/","title":"Class cse491::CoreObject","text":"<p>ClassList &gt; cse491 &gt; CoreObject</p> <p>Inherited by the following classes: cse491::WorldGrid</p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#public-functions","title":"Public Functions","text":"Type Name void Deserialize (std::istream &amp; is) Restore the state of this object, extracting it from the provided stream. bool Deserialize (std::string filename) A version of Deserialize that accepts a filename to read this object from. std::string GetTypeName () constAccess the derived name for this type. void Serialize (std::ostream &amp; os) constStore the current state of this object for later extraction. bool Serialize (std::string filename) constA version of Serialize that accepts a filename for saving just this object. virtual ~CoreObject ()"},{"location":"Core%20Project/classcse491_1_1_core_object/#protected-functions","title":"Protected Functions","text":"Type Name virtual void Deserialize_impl (std::istream &amp;) = 0Override to restore the state of this object from the provided stream. bool EndDeserialize (std::istream &amp; is) Set up end of the deserialization for this class (does type checking) void EndSerialize (std::ostream &amp; os) constSet up end of the serialization for this class (allows checking later) virtual std::string GetTypeName_impl () const = 0Override to allow access the derived name for this type. virtual void Serialize_impl (std::ostream &amp;) const = 0Override to store the current state of this object for later extraction. bool StartDeserialize (std::istream &amp; is) Set up beginning of the deserialization for this class (does type checking) void StartSerialize (std::ostream &amp; os) constSet up beginning of the serialization for this class (allows checking later)"},{"location":"Core%20Project/classcse491_1_1_core_object/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_core_object/#function-deserialize-12","title":"function Deserialize [1/2]","text":"<p>Restore the state of this object, extracting it from the provided stream. </p> <pre><code>inline void cse491::CoreObject::Deserialize (\n    std::istream &amp; is\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>input_stream</code> The istream with full details about this object. This function takes in an istream that was previously written using the paired Serialize() function and restores the associated class. It should stop loading when all data is finished; this may be signalled by the \":::END\" directive. The stream should end ready for the next extraction. </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-deserialize-22","title":"function Deserialize [2/2]","text":"<p>A version of Deserialize that accepts a filename to read this object from. </p> <pre><code>inline bool cse491::CoreObject::Deserialize (\n    std::string filename\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> The name of the file to open to load this object from. </li> </ul> <p>Returns:</p> <p>Success (true/false) </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-gettypename","title":"function GetTypeName","text":"<p>Access the derived name for this type. </p> <pre><code>inline std::string cse491::CoreObject::GetTypeName () const\n</code></pre> <p>Returns:</p> <p>A unique typename, ideally the exact name for this class (with scope) This member function will be helpful for serialization and debugging. It should return a fully scoped typename, such as \"cse491::WorldGrid\". </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-serialize-12","title":"function Serialize [1/2]","text":"<p>Store the current state of this object for later extraction. </p> <pre><code>inline void cse491::CoreObject::Serialize (\n    std::ostream &amp; os\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>output_stream</code> An ostream that the required information should be stored in. A derived class is required to store all information about itself in Serialize() and clearly note the end of storage to simplify de-serializing the data. This function will automatic add a start line that reads \":::START\" followed by the typename, and an end line with \":::END\" followed by the typename again. </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-serialize-22","title":"function Serialize [2/2]","text":"<p>A version of Serialize that accepts a filename for saving just this object. </p> <pre><code>inline bool cse491::CoreObject::Serialize (\n    std::string filename\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>filename</code> The name of the file to create for storing this object. </li> </ul> <p>Returns:</p> <p>Success (true/false) </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-coreobject","title":"function ~CoreObject","text":"<pre><code>inline virtual cse491::CoreObject::~CoreObject () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_core_object/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_core_object/#function-deserialize_impl","title":"function Deserialize_impl","text":"<p>Override to restore the state of this object from the provided stream. </p> <pre><code>virtual void cse491::CoreObject::Deserialize_impl (\n    std::istream &amp;\n) = 0\n</code></pre> <p>Parameters:</p> <ul> <li><code>input_stream</code> The istream with full details about this object. </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-enddeserialize","title":"function EndDeserialize","text":"<p>Set up end of the deserialization for this class (does type checking) </p> <pre><code>inline bool cse491::CoreObject::EndDeserialize (\n    std::istream &amp; is\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>is</code> Input stream to deserialize from. </li> </ul> <p>Returns:</p> <p>success (true/false) </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-endserialize","title":"function EndSerialize","text":"<p>Set up end of the serialization for this class (allows checking later) </p> <pre><code>inline void cse491::CoreObject::EndSerialize (\n    std::ostream &amp; os\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>os</code> Output stream to serialize into. </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-gettypename_impl","title":"function GetTypeName_impl","text":"<p>Override to allow access the derived name for this type. </p> <pre><code>virtual std::string cse491::CoreObject::GetTypeName_impl () const = 0\n</code></pre> <p>Returns:</p> <p>A unique typename, ideally the exact name for this class (with scope) This member function will be helpful for serialization and debugging. It should return a fully scoped typename, such as \"cse491::WorldGrid\". </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-serialize_impl","title":"function Serialize_impl","text":"<p>Override to store the current state of this object for later extraction. </p> <pre><code>virtual void cse491::CoreObject::Serialize_impl (\n    std::ostream &amp;\n) const = 0\n</code></pre> <p>Parameters:</p> <ul> <li><code>output_stream</code> An ostream that the required information should be stored in. </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-startdeserialize","title":"function StartDeserialize","text":"<p>Set up beginning of the deserialization for this class (does type checking) </p> <pre><code>inline bool cse491::CoreObject::StartDeserialize (\n    std::istream &amp; is\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>is</code> Input stream to deserialize from. </li> </ul> <p>Returns:</p> <p>success (true/false) </p>"},{"location":"Core%20Project/classcse491_1_1_core_object/#function-startserialize","title":"function StartSerialize","text":"<p>Set up beginning of the serialization for this class (allows checking later) </p> <pre><code>inline void cse491::CoreObject::StartSerialize (\n    std::ostream &amp; os\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>os</code> Output stream to serialize into. </li> </ul> <p>The documentation for this class was generated from the following file <code>source/core/CoreObject.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_entity/","title":"Class cse491::Entity","text":"<p>ClassList &gt; cse491 &gt; Entity</p> <p>Inherited by the following classes: cse491::AgentBase</p>"},{"location":"Core%20Project/classcse491_1_1_entity/#public-functions","title":"Public Functions","text":"Type Name Entity (size_t id, const std::string &amp; name)  Entity (const Entity &amp;) = delete Entity (Entity &amp;&amp;) = default size_t GetID () const const std::string &amp; GetName () const GridPosition GetPosition () const const T &amp; GetProperty (const std::string &amp; name) constReturn the current value of the specified property. bool HasProperty (const std::string &amp; name) constDoes this agent have a property with the specified name? virtual bool IsAgent () constIs this Entity actually an autonomous agent? (Overridden inAgentBase to return true) virtual bool IsInterface () const Entity &amp; RemoveProperty (const std::string &amp; name) Completely remove a property from an Entity . Entity &amp; SetName (const std::string in_name)  Entity &amp; SetPosition (GridPosition in_pos)  Entity &amp; SetPosition (double x, double y)  Entity &amp; SetProperties () Allow for setting multiple properties at once. Entity &amp; SetProperties (const std::string &amp; name, VALUE_T &amp;&amp; value, EXTRA_Ts &amp;&amp;... extras)  Entity &amp; SetProperty (const std::string &amp; name, const T &amp; value) Change the value of the specified property (will create if needed) Entity &amp; operator= (const Entity &amp;) = delete Entity &amp; operator= (Entity &amp;&amp;) = delete virtual ~Entity () = default"},{"location":"Core%20Project/classcse491_1_1_entity/#protected-attributes","title":"Protected Attributes","text":"Type Name const size_t id Unique ID for this entity. std::string name Name for this entity (E.g., \"Player 1\" or \"+2 Sword\") GridPosition position Where on the grid is this entity? std::unordered_map&lt; std::string, std::unique_ptr&lt; PropertyBase &gt; &gt; property_map Every entity can have a simple set of properties (with values) associated with it."},{"location":"Core%20Project/classcse491_1_1_entity/#protected-functions","title":"Protected Functions","text":"Type Name Property&lt; T &gt; &amp; AsProperty (const std::string &amp; name) const"},{"location":"Core%20Project/classcse491_1_1_entity/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_entity/#function-entity-13","title":"function Entity [1/3]","text":"<pre><code>inline cse491::Entity::Entity (\n    size_t id,\n    const std::string &amp; name\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-entity-23","title":"function Entity [2/3]","text":"<pre><code>cse491::Entity::Entity (\n    const Entity &amp;\n) = delete\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-entity-33","title":"function Entity [3/3]","text":"<pre><code>cse491::Entity::Entity (\n    Entity &amp;&amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-getid","title":"function GetID","text":"<pre><code>inline size_t cse491::Entity::GetID () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-getname","title":"function GetName","text":"<pre><code>inline const std::string &amp; cse491::Entity::GetName () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-getposition","title":"function GetPosition","text":"<pre><code>inline GridPosition cse491::Entity::GetPosition () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-getproperty","title":"function GetProperty","text":"<pre><code>template&lt;typename T typename T&gt;\ninline const T &amp; cse491::Entity::GetProperty (\n    const std::string &amp; name\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-hasproperty","title":"function HasProperty","text":"<pre><code>inline bool cse491::Entity::HasProperty (\n    const std::string &amp; name\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-isagent","title":"function IsAgent","text":"<pre><code>inline virtual bool cse491::Entity::IsAgent () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-isinterface","title":"function IsInterface","text":"<pre><code>inline virtual bool cse491::Entity::IsInterface () const\n</code></pre> <p>Is this Entity actually a specialty Agent that's an Interface for a human player? (Overridden in InterfaceBase to return true) </p>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-removeproperty","title":"function RemoveProperty","text":"<pre><code>inline Entity &amp; cse491::Entity::RemoveProperty (\n    const std::string &amp; name\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setname","title":"function SetName","text":"<pre><code>inline Entity &amp; cse491::Entity::SetName (\n    const std::string in_name\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setposition-12","title":"function SetPosition [1/2]","text":"<pre><code>inline Entity &amp; cse491::Entity::SetPosition (\n    GridPosition in_pos\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setposition-22","title":"function SetPosition [2/2]","text":"<pre><code>inline Entity &amp; cse491::Entity::SetPosition (\n    double x,\n    double y\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setproperties-12","title":"function SetProperties [1/2]","text":"<pre><code>inline Entity &amp; cse491::Entity::SetProperties () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setproperties-22","title":"function SetProperties [2/2]","text":"<pre><code>template&lt;typename VALUE_T typename VALUE_T, typename... EXTRA_Ts&gt;\ninline Entity &amp; cse491::Entity::SetProperties (\n    const std::string &amp; name,\n    VALUE_T &amp;&amp; value,\n    EXTRA_Ts &amp;&amp;... extras\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-setproperty","title":"function SetProperty","text":"<pre><code>template&lt;typename T typename T&gt;\ninline Entity &amp; cse491::Entity::SetProperty (\n    const std::string &amp; name,\n    const T &amp; value\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-operator","title":"function operator=","text":"<pre><code>Entity &amp; cse491::Entity::operator= (\n    const Entity &amp;\n) = delete\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-operator_1","title":"function operator=","text":"<pre><code>Entity &amp; cse491::Entity::operator= (\n    Entity &amp;&amp;\n) = delete\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#function-entity","title":"function ~Entity","text":"<pre><code>virtual cse491::Entity::~Entity () = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_entity/#variable-id","title":"variable id","text":"<pre><code>const size_t id;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#variable-name","title":"variable name","text":"<pre><code>std::string name;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#variable-position","title":"variable position","text":"<pre><code>GridPosition position;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#variable-property_map","title":"variable property_map","text":"<pre><code>std::unordered_map&lt;std::string, std::unique_ptr&lt;PropertyBase&gt; &gt; property_map;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_entity/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_entity/#function-asproperty","title":"function AsProperty","text":"<pre><code>template&lt;typename T typename T&gt;\ninline Property &lt; T &gt; &amp; cse491::Entity::AsProperty (\n    const std::string &amp; name\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/Entity.hpp</code></p>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/","title":"Struct cse491::Entity::Property","text":"<p>template &lt;typename T typename T&gt;</p> <p>ClassList &gt; cse491 &gt; Entity &gt; Property</p> <p>Inherits the following classes: cse491::Entity::PropertyBase</p>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#public-attributes","title":"Public Attributes","text":"Type Name T value"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#public-functions","title":"Public Functions","text":"Type Name Property (const T &amp; in)  Property (T &amp;&amp; in)"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#public-functions-inherited-from-cse491entitypropertybase","title":"Public Functions inherited from cse491::Entity::PropertyBase","text":"<p>See cse491::Entity::PropertyBase</p> Type Name virtual ~PropertyBase ()"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#variable-value","title":"variable value","text":"<pre><code>T value;\n</code></pre>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#function-property-12","title":"function Property [1/2]","text":"<pre><code>inline cse491::Entity::Property::Property (\n    const T &amp; in\n) \n</code></pre>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property/#function-property-22","title":"function Property [2/2]","text":"<pre><code>inline cse491::Entity::Property::Property (\n    T &amp;&amp; in\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/Entity.hpp</code></p>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property_base/","title":"Struct cse491::Entity::PropertyBase","text":"<p>ClassList &gt; cse491 &gt; Entity &gt; PropertyBase</p> <p>Inherited by the following classes: cse491::Entity::Property</p>"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property_base/#public-functions","title":"Public Functions","text":"Type Name virtual ~PropertyBase ()"},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property_base/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/structcse491_1_1_entity_1_1_property_base/#function-propertybase","title":"function ~PropertyBase","text":"<pre><code>inline virtual cse491::Entity::PropertyBase::~PropertyBase () \n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/Entity.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_grid_position/","title":"Class cse491::GridPosition","text":"<p>ClassList &gt; cse491 &gt; GridPosition</p> <p>Represents a position within a 2D grid of cells. This class provides utilities to manage a position in 2D space. The position is stored as floating-point values (to allow for smooth motion through a grid), but is easily converted to size_t for grid-cell identification. </p> <ul> <li><code>#include &lt;GridPosition.hpp&gt;</code></li> </ul>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#public-functions","title":"Public Functions","text":"Type Name GridPosition Above (double dist=1.0) constReturn a grid position above this one (by default, directly above) GridPosition Below (double dist=1.0) constReturn a grid position below this one (by default, directly below) size_t CellX () const size_t CellY () const GridPosition GetOffset (double offset_x, double offset_y) constReturn a the GridPosition at the requested offset. double GetX () const double GetY () const GridPosition () = default GridPosition (double x, double y)  GridPosition (const GridPosition &amp;) = default GridPosition &amp; Set (double in_x, double in_y)  GridPosition &amp; Shift (double shift_x, double shift_y)  GridPosition ToLeft (double dist=1.0) constReturn a grid position to the left of this one (by default, directly left) GridPosition ToRight (double dist=1.0) constReturn a grid position to the right of this one (by default, directly right) GridPosition operator+ (GridPosition in) constAdd together two grid positions and return the result. GridPosition &amp; operator+= (const GridPosition &amp; in)  GridPosition &amp; operator-= (const GridPosition &amp; in)  auto operator&lt;=&gt; (const GridPosition &amp;) constEnable all comparison operators (==, !=, &lt;, &lt;=, &gt;, &gt;=) GridPosition &amp; operator= (const GridPosition &amp;) = default"},{"location":"Core%20Project/classcse491_1_1_grid_position/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-above","title":"function Above","text":"<pre><code>inline GridPosition cse491::GridPosition::Above (\n    double dist=1.0\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-below","title":"function Below","text":"<pre><code>inline GridPosition cse491::GridPosition::Below (\n    double dist=1.0\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-cellx","title":"function CellX","text":"<pre><code>inline size_t cse491::GridPosition::CellX () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-celly","title":"function CellY","text":"<pre><code>inline size_t cse491::GridPosition::CellY () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-getoffset","title":"function GetOffset","text":"<pre><code>inline GridPosition cse491::GridPosition::GetOffset (\n    double offset_x,\n    double offset_y\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-getx","title":"function GetX","text":"<pre><code>inline double cse491::GridPosition::GetX () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-gety","title":"function GetY","text":"<pre><code>inline double cse491::GridPosition::GetY () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-gridposition-13","title":"function GridPosition [1/3]","text":"<pre><code>cse491::GridPosition::GridPosition () = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-gridposition-23","title":"function GridPosition [2/3]","text":"<pre><code>inline cse491::GridPosition::GridPosition (\n    double x,\n    double y\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-gridposition-33","title":"function GridPosition [3/3]","text":"<pre><code>cse491::GridPosition::GridPosition (\n    const GridPosition &amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-set","title":"function Set","text":"<pre><code>inline GridPosition &amp; cse491::GridPosition::Set (\n    double in_x,\n    double in_y\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-shift","title":"function Shift","text":"<pre><code>inline GridPosition &amp; cse491::GridPosition::Shift (\n    double shift_x,\n    double shift_y\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-toleft","title":"function ToLeft","text":"<pre><code>inline GridPosition cse491::GridPosition::ToLeft (\n    double dist=1.0\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-toright","title":"function ToRight","text":"<pre><code>inline GridPosition cse491::GridPosition::ToRight (\n    double dist=1.0\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-operator","title":"function operator+","text":"<pre><code>inline GridPosition cse491::GridPosition::operator+ (\n    GridPosition in\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-operator_1","title":"function operator+=","text":"<pre><code>inline GridPosition &amp; cse491::GridPosition::operator+= (\n    const GridPosition &amp; in\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-operator-","title":"function operator-=","text":"<pre><code>inline GridPosition &amp; cse491::GridPosition::operator-= (\n    const GridPosition &amp; in\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-operator_2","title":"function operator&lt;=&gt;","text":"<pre><code>auto cse491::GridPosition::operator&lt;=&gt; (\n    const GridPosition &amp;\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_grid_position/#function-operator_3","title":"function operator=","text":"<pre><code>GridPosition &amp; cse491::GridPosition::operator= (\n    const GridPosition &amp;\n) = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/GridPosition.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_interface_base/","title":"Class cse491::InterfaceBase","text":"<p>ClassList &gt; cse491 &gt; InterfaceBase</p> <p>Inherits the following classes: cse491::AgentBase</p>"},{"location":"Core%20Project/classcse491_1_1_interface_base/#public-functions","title":"Public Functions","text":"Type Name InterfaceBase (size_t id, const std::string &amp; name)  virtual bool IsInterface () override const ~InterfaceBase () = default"},{"location":"Core%20Project/classcse491_1_1_interface_base/#public-functions-inherited-from-cse491agentbase","title":"Public Functions inherited from cse491::AgentBase","text":"<p>See cse491::AgentBase</p> Type Name virtual AgentBase &amp; AddAction (const std::string &amp; action_name, size_t action_id) Provide a new action that this agent can take. AgentBase (size_t id, const std::string &amp; name)  size_t GetActionID (const std::string &amp; action_name) constReturn an action ID if that action exists, otherwise return zero. int GetActionResult () constRetrieve the result of the most recent action. bool HasAction (const std::string &amp; action_name) constTest if agent already has a specified action. virtual bool Initialize () Run AFTER the world configures the agent, for additional tests or setup. virtual bool IsAgent () override constIs this Entity actually an autonomous agent? (Overridden inAgentBase to return true) virtual size_t SelectAction (const WorldGrid &amp; grid, const type_options_t &amp; type_options, const item_set_t &amp; item_set, const agent_set_t &amp; agent_set) Decide the next action for this agent to perform; should be overridden! void SetActionResult (int result) Update the result from the most recent action. ~AgentBase () = default"},{"location":"Core%20Project/classcse491_1_1_interface_base/#public-functions-inherited-from-cse491entity","title":"Public Functions inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name Entity (size_t id, const std::string &amp; name)  Entity (const Entity &amp;) = delete Entity (Entity &amp;&amp;) = default size_t GetID () const const std::string &amp; GetName () const GridPosition GetPosition () const const T &amp; GetProperty (const std::string &amp; name) constReturn the current value of the specified property. bool HasProperty (const std::string &amp; name) constDoes this agent have a property with the specified name? virtual bool IsAgent () constIs this Entity actually an autonomous agent? (Overridden inAgentBase to return true) virtual bool IsInterface () const Entity &amp; RemoveProperty (const std::string &amp; name) Completely remove a property from an Entity . Entity &amp; SetName (const std::string in_name)  Entity &amp; SetPosition (GridPosition in_pos)  Entity &amp; SetPosition (double x, double y)  Entity &amp; SetProperties () Allow for setting multiple properties at once. Entity &amp; SetProperties (const std::string &amp; name, VALUE_T &amp;&amp; value, EXTRA_Ts &amp;&amp;... extras)  Entity &amp; SetProperty (const std::string &amp; name, const T &amp; value) Change the value of the specified property (will create if needed) Entity &amp; operator= (const Entity &amp;) = delete Entity &amp; operator= (Entity &amp;&amp;) = delete virtual ~Entity () = default"},{"location":"Core%20Project/classcse491_1_1_interface_base/#protected-attributes-inherited-from-cse491agentbase","title":"Protected Attributes inherited from cse491::AgentBase","text":"<p>See cse491::AgentBase</p> Type Name std::unordered_map&lt; std::string, size_t &gt; action_map A map of names to IDs for each available action. int action_result   = =1Usually a one (success) or zero (failure)."},{"location":"Core%20Project/classcse491_1_1_interface_base/#protected-attributes-inherited-from-cse491entity","title":"Protected Attributes inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name const size_t id Unique ID for this entity. std::string name Name for this entity (E.g., \"Player 1\" or \"+2 Sword\") GridPosition position Where on the grid is this entity? std::unordered_map&lt; std::string, std::unique_ptr&lt; PropertyBase &gt; &gt; property_map Every entity can have a simple set of properties (with values) associated with it."},{"location":"Core%20Project/classcse491_1_1_interface_base/#protected-functions-inherited-from-cse491entity","title":"Protected Functions inherited from cse491::Entity","text":"<p>See cse491::Entity</p> Type Name Property&lt; T &gt; &amp; AsProperty (const std::string &amp; name) const"},{"location":"Core%20Project/classcse491_1_1_interface_base/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_interface_base/#function-interfacebase","title":"function InterfaceBase","text":"<pre><code>inline cse491::InterfaceBase::InterfaceBase (\n    size_t id,\n    const std::string &amp; name\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_interface_base/#function-isinterface","title":"function IsInterface","text":"<pre><code>inline virtual bool cse491::InterfaceBase::IsInterface () override const\n</code></pre> <p>Is this Entity actually a specialty Agent that's an Interface for a human player? (Overridden in InterfaceBase to return true) </p> <p>Implements cse491::Entity::IsInterface</p>"},{"location":"Core%20Project/classcse491_1_1_interface_base/#function-interfacebase_1","title":"function ~InterfaceBase","text":"<pre><code>cse491::InterfaceBase::~InterfaceBase () = default\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/InterfaceBase.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_world_base/","title":"Class cse491::WorldBase","text":"<p>ClassList &gt; cse491 &gt; WorldBase</p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#public-functions","title":"Public Functions","text":"Type Name AgentBase &amp; AddAgent (std::string agent_name=\"None\", PROPERTY_Ts... properties) Build a new agent of the specified type. virtual int DoAction (AgentBase &amp; agent, size_t action_id) = 0Central function for an agent to take any action. AgentBase &amp; GetAgent (size_t id) Return a reference to an agent with a given ID. size_t GetCellTypeID (const std::string &amp; name) constReturn the ID associated with the cell type name. const std::string &amp; GetCellTypeName (size_t id) const char GetCellTypeSymbol (size_t id) const const type_options_t &amp; GetCellTypes () const virtual WorldGrid &amp; GetGrid () Return an editable version of the current grid for this world (main_grid by default) virtual const WorldGrid &amp; GetGrid () constReturn the current grid for this world (main_grid by default) Entity &amp; GetItem (size_t id) Return a reference to an agent with a given ID. size_t GetNumAgents () constGet the total number of AGENT entities. size_t GetNumItems () constGet the total number of NON-agent entities. virtual bool GetRunOver () constDetermine if the run has ended. virtual void Run () Run all agents repeatedly until an end condition is met. virtual void RunAgents () Step through each agent giving them a chance to take an action. virtual void UpdateWorld () UpdateWorld() is run after every agent has a turn. Override this function to manage background events for a world. WorldBase ()  virtual ~WorldBase () = default"},{"location":"Core%20Project/classcse491_1_1_world_base/#protected-attributes","title":"Protected Attributes","text":"Type Name agent_set_t agent_set Vector of pointers to agent entities. item_set_t item_set Vector of pointers to non-agent entities. WorldGrid main_grid bool run_over   = = falseShould the run end? type_options_t type_options Vector of types of cells in grids for this world."},{"location":"Core%20Project/classcse491_1_1_world_base/#protected-functions","title":"Protected Functions","text":"Type Name size_t AddCellType (const std::string &amp; name, const std::string &amp; desc=\"\", char symbol='\\0') Add a new type of cell to this world. virtual void ConfigAgent (AgentBase &amp;)"},{"location":"Core%20Project/classcse491_1_1_world_base/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_base/#function-addagent","title":"function AddAgent","text":"<p>Build a new agent of the specified type. </p> <pre><code>template&lt;typename AGENT_T typename AGENT_T, typename... PROPERTY_Ts&gt;\ninline AgentBase &amp; cse491::WorldBase::AddAgent (\n    std::string agent_name=\"None\",\n    PROPERTY_Ts... properties\n) \n</code></pre> <p>Template parameters:</p> <ul> <li><code>AGENT_T</code> The type of agent to build </li> <li><code>PROPERTY_Ts</code> Types for any properties to set at creation (automatic) </li> </ul> <p>Parameters:</p> <ul> <li><code>agent_name</code> The name of this agent </li> <li><code>properties</code> Name/value pairs for any properties set at creation </li> </ul> <p>Returns:</p> <p>A reference to the newly created agent </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-doaction","title":"function DoAction","text":"<p>Central function for an agent to take any action. </p> <pre><code>virtual int cse491::WorldBase::DoAction (\n    AgentBase &amp; agent,\n    size_t action_id\n) = 0\n</code></pre> <p>Parameters:</p> <ul> <li><code>agent</code> The specific agent taking the action </li> <li><code>action</code> The id of the action to take </li> </ul> <p>Returns:</p> <p>The result of this action (usually 0/1 to indicate success) </p> <p>Note:</p> <p>Thus function must be overridden in any derived world. </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getagent","title":"function GetAgent","text":"<pre><code>inline AgentBase &amp; cse491::WorldBase::GetAgent (\n    size_t id\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getcelltypeid","title":"function GetCellTypeID","text":"<p>Return the ID associated with the cell type name. </p> <pre><code>inline size_t cse491::WorldBase::GetCellTypeID (\n    const std::string &amp; name\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>name</code> The unique name of the cell type </li> </ul> <p>Returns:</p> <p>The unique ID of the cell type (or 0 if it doesn't exist.) </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getcelltypename","title":"function GetCellTypeName","text":"<pre><code>inline const std::string &amp; cse491::WorldBase::GetCellTypeName (\n    size_t id\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getcelltypesymbol","title":"function GetCellTypeSymbol","text":"<pre><code>inline char cse491::WorldBase::GetCellTypeSymbol (\n    size_t id\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getcelltypes","title":"function GetCellTypes","text":"<pre><code>inline const type_options_t &amp; cse491::WorldBase::GetCellTypes () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getgrid-12","title":"function GetGrid [1/2]","text":"<pre><code>inline virtual WorldGrid &amp; cse491::WorldBase::GetGrid () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getgrid-22","title":"function GetGrid [2/2]","text":"<pre><code>inline virtual const WorldGrid &amp; cse491::WorldBase::GetGrid () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getitem","title":"function GetItem","text":"<pre><code>inline Entity &amp; cse491::WorldBase::GetItem (\n    size_t id\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getnumagents","title":"function GetNumAgents","text":"<pre><code>inline size_t cse491::WorldBase::GetNumAgents () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getnumitems","title":"function GetNumItems","text":"<pre><code>inline size_t cse491::WorldBase::GetNumItems () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-getrunover","title":"function GetRunOver","text":"<pre><code>inline virtual bool cse491::WorldBase::GetRunOver () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-run","title":"function Run","text":"<pre><code>inline virtual void cse491::WorldBase::Run () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-runagents","title":"function RunAgents","text":"<p>Step through each agent giving them a chance to take an action. </p> <pre><code>inline virtual void cse491::WorldBase::RunAgents () \n</code></pre> <p>Note:</p> <p>Override this function if you want to control which grid the agents receive. </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-updateworld","title":"function UpdateWorld","text":"<pre><code>inline virtual void cse491::WorldBase::UpdateWorld () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-worldbase","title":"function WorldBase","text":"<pre><code>inline cse491::WorldBase::WorldBase () \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-worldbase_1","title":"function ~WorldBase","text":"<pre><code>virtual cse491::WorldBase::~WorldBase () = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_base/#variable-agent_set","title":"variable agent_set","text":"<pre><code>agent_set_t agent_set;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#variable-item_set","title":"variable item_set","text":"<pre><code>item_set_t item_set;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#variable-main_grid","title":"variable main_grid","text":"<pre><code>WorldGrid main_grid;\n</code></pre> <p>This is the main grid for this world; derived worlds may choose to have more than one grid. </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#variable-run_over","title":"variable run_over","text":"<pre><code>bool run_over;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#variable-type_options","title":"variable type_options","text":"<pre><code>type_options_t type_options;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_base/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_base/#function-addcelltype","title":"function AddCellType","text":"<p>Add a new type of cell to this world. </p> <pre><code>inline size_t cse491::WorldBase::AddCellType (\n    const std::string &amp; name,\n    const std::string &amp; desc=\"\",\n    char symbol='\\0'\n) \n</code></pre> <p>Parameters:</p> <ul> <li><code>name</code> A unique name for this cell type </li> <li><code>desc</code> A longer description of the cell type </li> <li><code>symbol</code> An (optional) unique symbol for text IO (files, command line) </li> </ul> <p>Returns:</p> <p>A unique ID associated with this cell type (position in type_options vector) </p>"},{"location":"Core%20Project/classcse491_1_1_world_base/#function-configagent","title":"function ConfigAgent","text":"<pre><code>inline virtual void cse491::WorldBase::ConfigAgent (\n    AgentBase &amp;\n) \n</code></pre> <p>Helper function that is run whenever a new agent is created. </p> <p>Note:</p> <p>Override this function to provide agents with actions or other setup. </p> <p>The documentation for this class was generated from the following file <code>source/core/WorldBase.hpp</code></p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/","title":"Class cse491::WorldGrid","text":"<p>ClassList &gt; cse491 &gt; WorldGrid</p> <p>A common interface class for core objects that sets up required functionality. This class ensures that objects can be serialized (saved), deserialized (restored) and provides helper functions. More...</p> <ul> <li><code>#include &lt;CoreObject.hpp&gt;</code></li> </ul> <p>Inherits the following classes: cse491::CoreObject</p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#public-functions","title":"Public Functions","text":"Type Name size_t At (size_t x, size_t y) const size_t &amp; At (size_t x, size_t y)  size_t At (GridPosition p) const size_t &amp; At (GridPosition p)  size_t GetHeight () const size_t GetNumCells () const size_t GetWidth () const bool IsValid (double x, double y) constTest if specific coordinates are in range for this GridWorld. bool IsValid (GridPosition pos) constTest if a GridPosition is in range for this GridWorld. void Read (std::istream &amp; is, const type_options_t &amp; types)  bool Read (std::string filename, const type_options_t &amp; types) Helper function to specify a file name to read the grid state from. void Resize (size_t new_width, size_t new_height, size_t default_type=0)  WorldGrid () = default WorldGrid (size_t width, size_t height, size_t default_type=0)  WorldGrid (const WorldGrid &amp;) = default WorldGrid (WorldGrid &amp;&amp;) = default void Write (std::ostream &amp; os, const type_options_t &amp; types) constWrite out a human-readable version of the current WorldGrid . bool Write (std::string filename, const type_options_t &amp; types) constHelper function to specify a file name to write the grid state to. WorldGrid &amp; operator= (const WorldGrid &amp;) = default WorldGrid &amp; operator= (WorldGrid &amp;&amp;) = default size_t operator[] (GridPosition p) const size_t &amp; operator[] (GridPosition p)"},{"location":"Core%20Project/classcse491_1_1_world_grid/#public-functions-inherited-from-cse491coreobject","title":"Public Functions inherited from cse491::CoreObject","text":"<p>See cse491::CoreObject</p> Type Name void Deserialize (std::istream &amp; is) Restore the state of this object, extracting it from the provided stream. bool Deserialize (std::string filename) A version of Deserialize that accepts a filename to read this object from. std::string GetTypeName () constAccess the derived name for this type. void Serialize (std::ostream &amp; os) constStore the current state of this object for later extraction. bool Serialize (std::string filename) constA version of Serialize that accepts a filename for saving just this object. virtual ~CoreObject ()"},{"location":"Core%20Project/classcse491_1_1_world_grid/#protected-attributes","title":"Protected Attributes","text":"Type Name std::vector&lt; size_t &gt; cells All cells, grouped by full rows, top to bottom. size_t height   = = 0Number of rows of cells in the grid. size_t width   = = 0Number of cells in each row of the grid."},{"location":"Core%20Project/classcse491_1_1_world_grid/#protected-functions","title":"Protected Functions","text":"Type Name virtual void Deserialize_impl (std::istream &amp; is) overrideRead the state of the grid out of the provided stream. virtual std::string GetTypeName_impl () override constOverride to allow access the derived name for this type. virtual void Serialize_impl (std::ostream &amp; os) override constWrite the current state of this grid into the provided stream. size_t ToIndex (size_t x, size_t y) constConvert an X and a Y value to the index in the vector."},{"location":"Core%20Project/classcse491_1_1_world_grid/#protected-functions-inherited-from-cse491coreobject","title":"Protected Functions inherited from cse491::CoreObject","text":"<p>See cse491::CoreObject</p> Type Name virtual void Deserialize_impl (std::istream &amp;) = 0Override to restore the state of this object from the provided stream. bool EndDeserialize (std::istream &amp; is) Set up end of the deserialization for this class (does type checking) void EndSerialize (std::ostream &amp; os) constSet up end of the serialization for this class (allows checking later) virtual std::string GetTypeName_impl () const = 0Override to allow access the derived name for this type. virtual void Serialize_impl (std::ostream &amp;) const = 0Override to store the current state of this object for later extraction. bool StartDeserialize (std::istream &amp; is) Set up beginning of the deserialization for this class (does type checking) void StartSerialize (std::ostream &amp; os) constSet up beginning of the serialization for this class (allows checking later)"},{"location":"Core%20Project/classcse491_1_1_world_grid/#detailed-description","title":"Detailed Description","text":"<p>Represents a 2D grid of cells. This class provides utilities to manage, access, and modify cells within a grid. </p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-at-14","title":"function At [1/4]","text":"<pre><code>inline size_t cse491::WorldGrid::At (\n    size_t x,\n    size_t y\n) const\n</code></pre> <p>Returns:</p> <p>The grid state at the provided x and y coordinates </p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-at-24","title":"function At [2/4]","text":"<pre><code>inline size_t &amp; cse491::WorldGrid::At (\n    size_t x,\n    size_t y\n) \n</code></pre> <p>Returns:</p> <p>A reference to the grid state at the provided x and y coordinates </p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-at-34","title":"function At [3/4]","text":"<pre><code>inline size_t cse491::WorldGrid::At (\n    GridPosition p\n) const\n</code></pre> <p>Returns:</p> <p>The state at a given GridPosition. </p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-at-44","title":"function At [4/4]","text":"<pre><code>inline size_t &amp; cse491::WorldGrid::At (\n    GridPosition p\n) \n</code></pre> <p>Returns:</p> <p>A reference to the state at a given GridPosition. </p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-getheight","title":"function GetHeight","text":"<pre><code>inline size_t cse491::WorldGrid::GetHeight () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-getnumcells","title":"function GetNumCells","text":"<pre><code>inline size_t cse491::WorldGrid::GetNumCells () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-getwidth","title":"function GetWidth","text":"<pre><code>inline size_t cse491::WorldGrid::GetWidth () const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-isvalid-12","title":"function IsValid [1/2]","text":"<pre><code>inline bool cse491::WorldGrid::IsValid (\n    double x,\n    double y\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-isvalid-22","title":"function IsValid [2/2]","text":"<pre><code>inline bool cse491::WorldGrid::IsValid (\n    GridPosition pos\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-read-12","title":"function Read [1/2]","text":"<pre><code>inline void cse491::WorldGrid::Read (\n    std::istream &amp; is,\n    const type_options_t &amp; types\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-read-22","title":"function Read [2/2]","text":"<pre><code>inline bool cse491::WorldGrid::Read (\n    std::string filename,\n    const type_options_t &amp; types\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-resize","title":"function Resize","text":"<pre><code>inline void cse491::WorldGrid::Resize (\n    size_t new_width,\n    size_t new_height,\n    size_t default_type=0\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-worldgrid-14","title":"function WorldGrid [1/4]","text":"<pre><code>cse491::WorldGrid::WorldGrid () = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-worldgrid-24","title":"function WorldGrid [2/4]","text":"<pre><code>inline cse491::WorldGrid::WorldGrid (\n    size_t width,\n    size_t height,\n    size_t default_type=0\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-worldgrid-34","title":"function WorldGrid [3/4]","text":"<pre><code>cse491::WorldGrid::WorldGrid (\n    const WorldGrid &amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-worldgrid-44","title":"function WorldGrid [4/4]","text":"<pre><code>cse491::WorldGrid::WorldGrid (\n    WorldGrid &amp;&amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-write-12","title":"function Write [1/2]","text":"<p>Write out a human-readable version of the current WorldGrid .</p> <pre><code>inline void cse491::WorldGrid::Write (\n    std::ostream &amp; os,\n    const type_options_t &amp; types\n) const\n</code></pre> <p>Parameters:</p> <ul> <li><code>os</code> Stream to write to </li> <li><code>types</code> A vector of CellTypes for symbol identification </li> </ul>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-write-22","title":"function Write [2/2]","text":"<pre><code>inline bool cse491::WorldGrid::Write (\n    std::string filename,\n    const type_options_t &amp; types\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-operator","title":"function operator=","text":"<pre><code>WorldGrid &amp; cse491::WorldGrid::operator= (\n    const WorldGrid &amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-operator_1","title":"function operator=","text":"<pre><code>WorldGrid &amp; cse491::WorldGrid::operator= (\n    WorldGrid &amp;&amp;\n) = default\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-operator_2","title":"function operator[]","text":"<pre><code>inline size_t cse491::WorldGrid::operator[] (\n    GridPosition p\n) const\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-operator_3","title":"function operator[]","text":"<pre><code>inline size_t &amp; cse491::WorldGrid::operator[] (\n    GridPosition p\n) \n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#protected-attributes-documentation","title":"Protected Attributes Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_grid/#variable-cells","title":"variable cells","text":"<pre><code>std::vector&lt;size_t&gt; cells;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#variable-height","title":"variable height","text":"<pre><code>size_t height;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#variable-width","title":"variable width","text":"<pre><code>size_t width;\n</code></pre>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#protected-functions-documentation","title":"Protected Functions Documentation","text":""},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-deserialize_impl","title":"function Deserialize_impl","text":"<pre><code>inline virtual void cse491::WorldGrid::Deserialize_impl (\n    std::istream &amp; is\n) override\n</code></pre> <p>Implements cse491::CoreObject::Deserialize_impl</p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-gettypename_impl","title":"function GetTypeName_impl","text":"<p>Override to allow access the derived name for this type. </p> <pre><code>inline virtual std::string cse491::WorldGrid::GetTypeName_impl () override const\n</code></pre> <p>Returns:</p> <p>A unique typename, ideally the exact name for this class (with scope) This member function will be helpful for serialization and debugging. It should return a fully scoped typename, such as \"cse491::WorldGrid\". </p> <p>Implements cse491::CoreObject::GetTypeName_impl</p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-serialize_impl","title":"function Serialize_impl","text":"<pre><code>inline virtual void cse491::WorldGrid::Serialize_impl (\n    std::ostream &amp; os\n) override const\n</code></pre> <p>Implements cse491::CoreObject::Serialize_impl</p>"},{"location":"Core%20Project/classcse491_1_1_world_grid/#function-toindex","title":"function ToIndex","text":"<pre><code>inline size_t cse491::WorldGrid::ToIndex (\n    size_t x,\n    size_t y\n) const\n</code></pre> <p>The documentation for this class was generated from the following file <code>source/core/WorldGrid.hpp</code></p>"},{"location":"Core%20Project/dir_b2f33c71d4aa5e7af42a1ca61ff5af1b/","title":"Dir source","text":"<p>FileList &gt; source</p>"},{"location":"Core%20Project/dir_b2f33c71d4aa5e7af42a1ca61ff5af1b/#directories","title":"Directories","text":"Type Name dir core <p>The documentation for this class was generated from the following file <code>source/</code></p>"},{"location":"Core%20Project/dir_0d27ce74e9bd514c31e1d63efab6b388/","title":"Dir source/core","text":"<p>FileList &gt; core</p>"},{"location":"Core%20Project/dir_0d27ce74e9bd514c31e1d63efab6b388/#files","title":"Files","text":"Type Name file AgentBase.hpp file CoreObject.hpp file Data.hpp file Entity.hpp file GridPosition.hpp file InterfaceBase.hpp file WorldBase.hpp file WorldGrid.hpp <p>The documentation for this class was generated from the following file <code>source/core/</code></p>"},{"location":"Core%20Project/_agent_base_8hpp/","title":"File AgentBase.hpp","text":"<p>FileList &gt; core &gt; AgentBase.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cassert&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include \"Data.hpp\"</code></li> <li><code>#include \"Entity.hpp\"</code></li> <li><code>#include \"GridPosition.hpp\"</code></li> <li><code>#include \"WorldGrid.hpp\"</code></li> </ul>"},{"location":"Core%20Project/_agent_base_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_agent_base_8hpp/#classes","title":"Classes","text":"Type Name class AgentBase <p>The documentation for this class was generated from the following file <code>source/core/AgentBase.hpp</code></p>"},{"location":"Core%20Project/_agent_base_8hpp_source/","title":"File AgentBase.hpp","text":"<p>File List &gt; core &gt; AgentBase.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;cassert&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n\n#include \"Data.hpp\"\n#include \"Entity.hpp\"\n#include \"GridPosition.hpp\"\n#include \"WorldGrid.hpp\"\n\nnamespace cse491 {\n\n  class AgentBase : public Entity {\n  protected:\n    std::unordered_map&lt;std::string, size_t&gt; action_map;\n\n    int action_result=1;  \n\n  public:\n    AgentBase(size_t id, const std::string &amp; name) : Entity(id, name) { }\n    ~AgentBase() = default; // Already virtual from Entity\n\n    // -- World Interactions --\n\n    virtual bool Initialize() { return true; }\n\n    // -- Entity Overrides --\n\n    bool IsAgent() const override { return true; }\n\n\n    // -- Action management --\n\n    [[nodiscard]] bool HasAction(const std::string &amp; action_name) const {\n      return action_map.count(action_name);\n    }\n\n    [[nodiscard]] size_t GetActionID(const std::string &amp; action_name) const {\n      auto it = action_map.find(action_name);\n      if (it == action_map.end()) return 0;\n      return it-&gt;second;\n    }\n\n    virtual AgentBase &amp; AddAction(const std::string &amp; action_name, size_t action_id) {\n      assert(!HasAction(action_name)); // Cannot add existing action name.\n      action_map[action_name] = action_id;\n      return *this;\n    }\n\n    [[nodiscard]] virtual size_t SelectAction(\n        [[maybe_unused]] const WorldGrid &amp; grid,\n        [[maybe_unused]] const type_options_t &amp; type_options,\n        [[maybe_unused]] const item_set_t &amp; item_set,\n        [[maybe_unused]] const agent_set_t &amp; agent_set\n      )\n    { return 0; }\n\n    [[nodiscard]] int GetActionResult() const { return action_result; }\n\n    void SetActionResult(int result) { action_result = result; }\n\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_core_object_8hpp/","title":"File CoreObject.hpp","text":"<p>FileList &gt; core &gt; CoreObject.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> </ul>"},{"location":"Core%20Project/_core_object_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_core_object_8hpp/#classes","title":"Classes","text":"Type Name class CoreObject <p>The documentation for this class was generated from the following file <code>source/core/CoreObject.hpp</code></p>"},{"location":"Core%20Project/_core_object_8hpp_source/","title":"File CoreObject.hpp","text":"<p>File List &gt; core &gt; CoreObject.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nnamespace cse491 {\n\n  class CoreObject {\n  protected:\n    // -- Required functionality in all core classes --\n    // These functions are core functionality that must be implemented in all derived\n    // classes.  They will enable the public interface to behave correctly.\n\n    virtual std::string GetTypeName_impl() const = 0;\n\n    virtual void Serialize_impl(std::ostream &amp;) const = 0;\n\n    virtual void Deserialize_impl(std::istream &amp;) = 0;\n\n\n    // -- Helper functions --\n    // The functions below can be used in derived classes to implement above functionality.\n\n    void StartSerialize(std::ostream &amp; os) const {\n      os &lt;&lt; \":::START \" &lt;&lt; GetTypeName() &lt;&lt; \"\\n\";\n    }\n\n    void EndSerialize(std::ostream &amp; os) const {\n      os &lt;&lt; \":::END \" &lt;&lt; GetTypeName() &lt;&lt; \"\\n\";\n    }\n\n    bool StartDeserialize(std::istream &amp; is) {\n      std::string line;\n      std::getline(is, line);\n      std::string expected = \":::START \" + GetTypeName();\n      if (line != expected) {\n        std::cerr &lt;&lt; \"Deserialization error.  Expected: \" &lt;&lt; expected\n                  &lt;&lt; \"...Found: \" &lt;&lt; line;\n        return false;\n      }\n      return true;\n    }\n\n    bool EndDeserialize(std::istream &amp; is) {\n      std::string line;\n      std::getline(is, line);\n      std::string expected = \":::END \" + GetTypeName();\n      if (line != expected) {\n        std::cerr &lt;&lt; \"Deserialization error.  Expected: \" &lt;&lt; expected\n                  &lt;&lt; \"...Found: \" &lt;&lt; line;\n        return false;\n      }\n      return true;\n    }\n\n  public:\n    virtual ~CoreObject() { }\n\n    std::string GetTypeName() const { return GetTypeName_impl(); }\n\n    void Serialize(std::ostream &amp; os) const {\n      StartSerialize(os);\n      Serialize_impl(os);\n      EndSerialize(os);\n    }\n\n    void Deserialize(std::istream &amp; is) {\n      StartDeserialize(is);\n      Deserialize_impl(is);\n      EndDeserialize(is);\n    }\n\n    bool Serialize(std::string filename) const {\n      std::ofstream os(filename);\n      if (!os.is_open()) {\n        std::cerr &lt;&lt; \"Could not open file '\" &lt;&lt; filename &lt;&lt; \"' for Serialize().\" &lt;&lt; std::endl;\n        return false;\n      }\n      Serialize(os);\n      return true;\n    }\n\n    bool Deserialize(std::string filename) {\n      std::ifstream is(filename);\n      if (!is.is_open()) {\n        std::cerr &lt;&lt; \"Could not open file '\" &lt;&lt; filename &lt;&lt; \"' for Serialize().\" &lt;&lt; std::endl;\n        return false;\n      }\n      Deserialize(is);\n      return true;\n    }\n\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_data_8hpp/","title":"File Data.hpp","text":"<p>FileList &gt; core &gt; Data.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> </ul>"},{"location":"Core%20Project/_data_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_data_8hpp/#classes","title":"Classes","text":"Type Name struct CellType Simple data structure to hold info about a TYPE of cell in the world. <p>The documentation for this class was generated from the following file <code>source/core/Data.hpp</code></p>"},{"location":"Core%20Project/_data_8hpp_source/","title":"File Data.hpp","text":"<p>File List &gt; core &gt; Data.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\nnamespace cse491 {\n\n  struct CellType {\n    std::string name;  \n    std::string desc;  \n    char symbol;       \n  };\n\n  using type_options_t = std::vector&lt;CellType&gt;;\n\n  class Entity;\n  using item_set_t = std::vector&lt;std::unique_ptr&lt;Entity&gt;&gt;;\n\n  class AgentBase;\n  using agent_set_t = std::vector&lt;std::unique_ptr&lt;AgentBase&gt;&gt;;\n\n}\n\n</code></pre>"},{"location":"Core%20Project/_entity_8hpp/","title":"File Entity.hpp","text":"<p>FileList &gt; core &gt; Entity.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cassert&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include \"GridPosition.hpp\"</code></li> </ul>"},{"location":"Core%20Project/_entity_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_entity_8hpp/#classes","title":"Classes","text":"Type Name class Entity <p>The documentation for this class was generated from the following file <code>source/core/Entity.hpp</code></p>"},{"location":"Core%20Project/_entity_8hpp_source/","title":"File Entity.hpp","text":"<p>File List &gt; core &gt; Entity.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;cassert&gt;\n#include &lt;string&gt;\n#include &lt;unordered_map&gt;\n\n#include \"GridPosition.hpp\"\n\nnamespace cse491 {\n\n  class Entity {\n  protected:\n    const size_t id;        \n    std::string name;       \n    GridPosition position;  \n\n    struct PropertyBase {\n      virtual ~PropertyBase() { }\n    };\n\n    template &lt;typename T&gt;\n    struct Property : public PropertyBase {\n      T value;\n      Property(const T &amp; in) : value(in) { }\n      Property(T &amp;&amp; in) : value(in) { }\n    };\n\n    std::unordered_map&lt;std::string, std::unique_ptr&lt;PropertyBase&gt;&gt; property_map;\n\n    // -- Helper Functions --\n\n    template &lt;typename T&gt;\n    Property&lt;T&gt; &amp; AsProperty(const std::string &amp; name) const {\n      assert( HasProperty(name) );\n      PropertyBase * raw_ptr = property_map.at(name).get();\n      assert( dynamic_cast&lt;Property&lt;T&gt; *&gt;(raw_ptr) );\n      auto property_ptr = static_cast&lt;Property&lt;T&gt; *&gt;(raw_ptr);\n      return *property_ptr;\n    }\n\n  public:\n    Entity(size_t id, const std::string &amp; name) : id(id), name(name) { }\n    Entity(const Entity &amp;) = delete; // Entities must be unique and shouldn't be copied.\n    Entity(Entity &amp;&amp;) = default;\n    virtual ~Entity() = default;\n\n    Entity &amp; operator=(const Entity &amp;) = delete; // Entities must be unique and shouldn't be copied.\n    Entity &amp; operator=(Entity &amp;&amp;) = delete;      // Entities should never have IDs change.\n\n    // -- Accessors --\n    [[nodiscard]] size_t GetID() const { return id; }\n    [[nodiscard]] const std::string &amp; GetName() const { return name; }\n    [[nodiscard]] GridPosition GetPosition() const { return position; }\n\n    Entity &amp; SetName(const std::string in_name) { name = in_name; return *this; }\n    Entity &amp; SetPosition(GridPosition in_pos) { position = in_pos; return *this; }\n    Entity &amp; SetPosition(double x, double y) { position = GridPosition{x,y}; return *this; }\n\n    virtual bool IsAgent() const { return false; }\n\n    virtual bool IsInterface() const { return false; }\n\n\n    // -- Property Management --\n\n    [[nodiscard]] bool HasProperty(const std::string &amp; name) const {\n      return property_map.count(name);\n    }\n\n    template &lt;typename T=double&gt;\n    [[nodiscard]] const T &amp; GetProperty(const std::string &amp; name) const {\n      assert(HasProperty(name));   // Break if property does not already exist.\n      return AsProperty&lt;T&gt;(name).value;\n    }\n\n    template &lt;typename T&gt;\n    Entity &amp; SetProperty(const std::string &amp; name, const T &amp; value) {\n      if (HasProperty(name)) {\n        AsProperty&lt;T&gt;(name).value = value;\n      } else {\n        property_map[name] = std::make_unique&lt;Property&lt;T&gt;&gt;(value);\n      }\n      return *this;\n    }\n\n    Entity &amp; SetProperties() { return *this; }\n\n    template &lt;typename VALUE_T, typename... EXTRA_Ts&gt;\n    Entity &amp; SetProperties(const std::string &amp; name, VALUE_T &amp;&amp; value, EXTRA_Ts &amp;&amp;... extras) {\n      SetProperty(name, std::forward&lt;VALUE_T&gt;(value));        // Set the first property...\n      return SetProperties(std::forward&lt;EXTRA_Ts&gt;(extras)...); // And any additional properties...\n    }\n\n    Entity &amp; RemoveProperty(const std::string &amp; name) {\n      property_map.erase(name);\n      return *this;\n    }    \n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_grid_position_8hpp/","title":"File GridPosition.hpp","text":"<p>FileList &gt; core &gt; GridPosition.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cassert&gt;</code></li> <li><code>#include &lt;compare&gt;</code></li> <li><code>#include &lt;cstddef&gt;</code></li> </ul>"},{"location":"Core%20Project/_grid_position_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_grid_position_8hpp/#classes","title":"Classes","text":"Type Name class GridPosition Represents a position within a 2D grid of cells. This class provides utilities to manage a position in 2D space. The position is stored as floating-point values (to allow for smooth motion through a grid), but is easily converted to size_t for grid-cell identification. <p>The documentation for this class was generated from the following file <code>source/core/GridPosition.hpp</code></p>"},{"location":"Core%20Project/_grid_position_8hpp_source/","title":"File GridPosition.hpp","text":"<p>File List &gt; core &gt; GridPosition.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;cassert&gt;\n#include &lt;compare&gt;    // For operator&lt;=&gt;\n#include &lt;cstddef&gt;    // For size_t\n\nnamespace cse491 {\n\n  class GridPosition {\n  private:\n    double x = 0.0;\n    double y = 0.0;\n\n  public:\n    GridPosition() = default;\n    GridPosition(double x, double y) : x(x), y(y) { }\n    GridPosition(const GridPosition &amp;) = default;\n\n    GridPosition &amp; operator=(const GridPosition &amp;) = default;\n\n    // -- Accessors --\n\n    [[nodiscard]] double GetX() const { return x; }\n    [[nodiscard]] double GetY() const { return y; }\n    [[nodiscard]] size_t CellX() const { return static_cast&lt;size_t&gt;(x); }\n    [[nodiscard]] size_t CellY() const { return static_cast&lt;size_t&gt;(y); }\n\n    auto operator&lt;=&gt;(const GridPosition &amp;) const = default;\n\n    // -- Modifiers --\n\n    GridPosition &amp; Set(double in_x, double in_y) {\n      x=in_x; y=in_y;\n      return *this;\n    }\n    GridPosition &amp; Shift(double shift_x, double shift_y) {\n      x += shift_x; y += shift_y;\n      return *this;\n    }\n\n    GridPosition &amp; operator+=(const GridPosition &amp; in) { return Shift(in.x, in.y); }\n    GridPosition &amp; operator-=(const GridPosition &amp; in) { return Shift(-in.x, -in.y); }\n\n\n    // -- Const Operations --\n\n    [[nodiscard]] GridPosition GetOffset(double offset_x, double offset_y) const {\n      return GridPosition{x+offset_x,y+offset_y};\n    }\n\n    [[nodiscard]] GridPosition Above(double dist=1.0) const { return GetOffset(0.0, -dist); }\n\n    [[nodiscard]] GridPosition Below(double dist=1.0) const { return GetOffset(0.0, dist); }\n\n    [[nodiscard]] GridPosition ToLeft(double dist=1.0) const { return GetOffset(-dist, 0.0); }\n\n    [[nodiscard]] GridPosition ToRight(double dist=1.0) const { return GetOffset(dist, 0.0); }\n\n    [[nodiscard]] GridPosition operator+(GridPosition in) const {\n      return GetOffset(in.x, in.y);\n    }\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_interface_base_8hpp/","title":"File InterfaceBase.hpp","text":"<p>FileList &gt; core &gt; InterfaceBase.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;string&gt;</code></li> <li><code>#include \"AgentBase.hpp\"</code></li> </ul>"},{"location":"Core%20Project/_interface_base_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_interface_base_8hpp/#classes","title":"Classes","text":"Type Name class InterfaceBase <p>The documentation for this class was generated from the following file <code>source/core/InterfaceBase.hpp</code></p>"},{"location":"Core%20Project/_interface_base_8hpp_source/","title":"File InterfaceBase.hpp","text":"<p>File List &gt; core &gt; InterfaceBase.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;string&gt;\n\n#include \"AgentBase.hpp\"\n\nnamespace cse491 {\n\n  class InterfaceBase : public AgentBase {\n  protected:\n\n  public:\n    InterfaceBase(size_t id, const std::string &amp; name) : AgentBase(id, name) { }\n    ~InterfaceBase() = default; // Already virtual from Entity\n\n    // -- Entity Overrides --\n\n    bool IsInterface() const override { return true; }\n\n\n    // -- AgentBase overrides --\n    //\n    // Multiple functions defined as virtual in AgentBase can also be overridden from\n    // custom Interfaces.  Specific available function to override include:\n\n    // bool Initialize() { return true; }\n    //\n    // Initialize is run AFTER the world configures the interface with actions, etc, allowing\n    // for additional setup, such as targeted buttons.\n\n\n    // size_t SelectAction([[maybe_unused]] const WorldGrid &amp; grid) { return 0; }\n    //\n    // SelectAction is run when the world is given the player an opportunity to choose\n    // and action to perform. The interface will be provided with the current WorldGrid\n    // Return the ID associated with the action to perform; (zero is always \"no action\")\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_world_base_8hpp/","title":"File WorldBase.hpp","text":"<p>FileList &gt; core &gt; WorldBase.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cassert&gt;</code></li> <li><code>#include &lt;memory&gt;</code></li> <li><code>#include &lt;string&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"AgentBase.hpp\"</code></li> <li><code>#include \"Data.hpp\"</code></li> <li><code>#include \"Entity.hpp\"</code></li> <li><code>#include \"WorldGrid.hpp\"</code></li> </ul>"},{"location":"Core%20Project/_world_base_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_world_base_8hpp/#classes","title":"Classes","text":"Type Name class WorldBase <p>The documentation for this class was generated from the following file <code>source/core/WorldBase.hpp</code></p>"},{"location":"Core%20Project/_world_base_8hpp_source/","title":"File WorldBase.hpp","text":"<p>File List &gt; core &gt; WorldBase.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;cassert&gt;\n#include &lt;memory&gt;\n#include &lt;string&gt;\n#include &lt;vector&gt;\n\n#include \"AgentBase.hpp\"\n#include \"Data.hpp\"\n#include \"Entity.hpp\"\n#include \"WorldGrid.hpp\"\n\nnamespace cse491 {\n\n  class WorldBase {\n  protected:\n    WorldGrid main_grid;\n    type_options_t type_options; \n\n    item_set_t item_set;     \n    agent_set_t agent_set;   \n\n    bool run_over = false;   \n\n    virtual void ConfigAgent(AgentBase &amp; /* agent */) { }\n\n    size_t AddCellType(const std::string &amp; name, const std::string &amp; desc=\"\",\n                           char symbol='\\0') {\n      type_options.push_back(CellType{name, desc, symbol});\n      return type_options.size() - 1;\n    }\n\n  public:\n    WorldBase() {\n      // The first cell type (ID 0) should be reserved for errors or empty spots in a grid.\n      AddCellType(\"Unknown\", \"This is an invalid cell type and should not be reachable.\");\n    }\n    virtual ~WorldBase() = default;\n\n    // -- Accessors --\n\n    [[nodiscard]] size_t GetNumItems() const { return item_set.size(); }\n\n    [[nodiscard]] size_t GetNumAgents() const { return agent_set.size(); }\n\n    [[nodiscard]] Entity &amp; GetItem(size_t id) {\n      assert(id &lt; item_set.size());\n      return *item_set[id];\n    }\n\n    [[nodiscard]] AgentBase &amp; GetAgent(size_t id) {\n      assert(id &lt; agent_set.size());\n      return *agent_set[id];\n    }\n\n    virtual WorldGrid &amp; GetGrid() { return main_grid; }\n\n    virtual const WorldGrid &amp; GetGrid() const { return main_grid; }\n\n    virtual bool GetRunOver() const { return run_over; }\n\n    // -- Agent Management --\n\n    template &lt;typename AGENT_T, typename... PROPERTY_Ts&gt;\n    AgentBase &amp; AddAgent(std::string agent_name=\"None\", PROPERTY_Ts... properties) {\n      auto agent_ptr = std::make_unique&lt;AGENT_T&gt;(agent_set.size(), agent_name);\n      agent_ptr-&gt;SetProperties(std::forward&lt;PROPERTY_Ts&gt;(properties)...);\n      ConfigAgent(*agent_ptr);\n      if (agent_ptr-&gt;Initialize() == false) {\n        std::cerr &lt;&lt; \"Failed to initialize agent '\" &lt;&lt; agent_name &lt;&lt; \"'.\" &lt;&lt; std::endl;\n      }\n      agent_set.emplace_back(std::move(agent_ptr));\n      return *agent_set.back();\n    }\n\n\n    // -- Action Management --\n\n    virtual int DoAction(AgentBase &amp; agent, size_t action_id) = 0;\n\n    virtual void RunAgents() {\n      for (const auto &amp; agent_ptr : agent_set) {\n        size_t action_id =\n          agent_ptr-&gt;SelectAction(main_grid, type_options, item_set, agent_set);\n        int result = DoAction(*agent_ptr, action_id);\n        agent_ptr-&gt;SetActionResult(result);\n      }\n    }\n\n    virtual void UpdateWorld() { }\n\n    virtual void Run() {\n      run_over = false;\n      while (!run_over) {\n        RunAgents();\n        UpdateWorld();\n      }\n    }\n\n    // CellType management.\n\n    // Return a const vector of all of the possible cell types.\n    [[nodiscard]] const type_options_t &amp; GetCellTypes() const { return type_options; }\n\n\n    [[nodiscard]] size_t GetCellTypeID(const std::string &amp; name) const { \n      for (size_t i=1; i &lt; type_options.size(); ++i) {\n        if (type_options[i].name == name) return i;\n      }\n      return 0;\n    }\n\n    [[nodiscard]] const std::string &amp; GetCellTypeName(size_t id) const {\n      if (id &gt;= type_options.size()) return type_options[0].name;\n      return type_options[id].name;\n    }\n\n    [[nodiscard]] char GetCellTypeSymbol(size_t id) const {\n      if (id &gt;= type_options.size()) return type_options[0].symbol;\n      return type_options[id].symbol;\n    }\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/_world_grid_8hpp/","title":"File WorldGrid.hpp","text":"<p>FileList &gt; core &gt; WorldGrid.hpp</p> <p>Go to the source code of this file</p> <ul> <li><code>#include &lt;cassert&gt;</code></li> <li><code>#include &lt;fstream&gt;</code></li> <li><code>#include &lt;iostream&gt;</code></li> <li><code>#include &lt;unordered_map&gt;</code></li> <li><code>#include &lt;vector&gt;</code></li> <li><code>#include \"CoreObject.hpp\"</code></li> <li><code>#include \"GridPosition.hpp\"</code></li> <li><code>#include \"Data.hpp\"</code></li> </ul>"},{"location":"Core%20Project/_world_grid_8hpp/#namespaces","title":"Namespaces","text":"Type Name namespace cse491 A base class interface for all agent types."},{"location":"Core%20Project/_world_grid_8hpp/#classes","title":"Classes","text":"Type Name class WorldGrid A common interface class for core objects that sets up required functionality. This class ensures that objects can be serialized (saved), deserialized (restored) and provides helper functions. <p>The documentation for this class was generated from the following file <code>source/core/WorldGrid.hpp</code></p>"},{"location":"Core%20Project/_world_grid_8hpp_source/","title":"File WorldGrid.hpp","text":"<p>File List &gt; core &gt; WorldGrid.hpp</p> <p>Go to the documentation of this file</p> <pre><code>\n\n#pragma once\n\n#include &lt;cassert&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\n#include &lt;unordered_map&gt;\n#include &lt;vector&gt;\n\n#include \"CoreObject.hpp\"\n#include \"GridPosition.hpp\"\n#include \"Data.hpp\"\n\nnamespace cse491 {\n\n  class WorldGrid : public CoreObject {\n  protected:\n    size_t width = 0;           \n    size_t height = 0;          \n    std::vector&lt;size_t&gt; cells;  \n\n    // -- Helper functions --\n\n    [[nodiscard]] inline size_t ToIndex(size_t x, size_t y) const {\n      return x + y * width;\n    }\n\n    // -- Serialize and Deserialize functions --\n    // Mechanisms to efficiently save and load the exact state of the grid.\n    // File format is width and height followed by all\n    // values in the grid on each line thereafter.\n\n    std::string GetTypeName_impl() const override { return \"cse491::WorldGrid\"; }\n\n    void Serialize_impl(std::ostream &amp; os) const override {\n      os &lt;&lt; width &lt;&lt; \" \" &lt;&lt; height;\n      for (size_t state : cells) os &lt;&lt; ' ' &lt;&lt; state;\n      os &lt;&lt; std::endl;\n    }\n\n    void Deserialize_impl(std::istream &amp; is) override {\n      is &gt;&gt; width &gt;&gt; height;\n      cells.resize(width * height);\n      for (size_t &amp; state : cells) is &gt;&gt; state;\n    }\n\n  public:\n    WorldGrid() = default;\n    WorldGrid(size_t width, size_t height, size_t default_type=0)\n      : width(width), height(height), cells(width*height, default_type) { }\n    WorldGrid(const WorldGrid &amp;) = default;\n    WorldGrid(WorldGrid &amp;&amp;) = default;\n\n    WorldGrid &amp; operator=(const WorldGrid &amp;) = default;\n    WorldGrid &amp; operator=(WorldGrid &amp;&amp;) = default;\n\n    // -- Accessors --\n    [[nodiscard]] size_t GetWidth() const { return width; }\n    [[nodiscard]] size_t GetHeight() const { return height; }\n    [[nodiscard]] size_t GetNumCells() const { return cells.size(); }\n\n    [[nodiscard]] bool IsValid(double x, double y) const {\n      return x &gt;= 0.0 &amp;&amp; x &lt; width &amp;&amp; y &gt;= 0.0 &amp;&amp; y &lt; height;\n    }\n\n    [[nodiscard]] bool IsValid(GridPosition pos) const {\n      return IsValid(pos.GetX(), pos.GetY());\n    }\n\n    [[nodiscard]] size_t At(size_t x, size_t y) const {\n      assert(IsValid(x,y));\n      return cells[ToIndex(x,y)];\n    }\n\n    [[nodiscard]] size_t &amp; At(size_t x, size_t y) {\n      assert(IsValid(x,y));\n      return cells[ToIndex(x,y)];\n    }\n\n    [[nodiscard]] size_t At(GridPosition p) const { return At(p.CellX(), p.CellY()); }\n\n    [[nodiscard]] size_t &amp; At(GridPosition p) { return At(p.CellX(), p.CellY()); }\n\n    [[nodiscard]] size_t operator[](GridPosition p) const { return At(p); }\n    [[nodiscard]] size_t &amp; operator[](GridPosition p) { return At(p); }\n\n\n    // Size adjustments.\n    void Resize(size_t new_width, size_t new_height, size_t default_type=0) {\n      // Create a new vector of the correct size.\n      std::vector&lt;size_t&gt; new_cells(new_width*new_height, default_type);\n\n      // Copy the overlapping portions of the two grids.\n      size_t min_width = std::min(width, new_width);\n      size_t min_height = std::min(height, new_height);\n      for (size_t x = 0; x &lt; min_width; ++x) {\n        for (size_t y = 0; y &lt; min_height; ++y) {\n          new_cells[x+y*new_width] = cells[ToIndex(x,y)];\n        }\n      }\n\n      // Swap the new grid in; let the old grid be deallocated in its place.\n      std::swap(cells, new_cells);\n      width = new_width;\n      height = new_height;\n    }\n\n\n    // -- Read and Write functions --\n    // These are the same idea as Save and Load, but they are human readable, but they\n    // also require that each state has been assigned a unique character symbol.\n\n    void Write(std::ostream &amp; os, const type_options_t &amp; types) const {\n      size_t cell_id = 0;\n      for (size_t y=0; y &lt; height; ++y) {\n        for (size_t x=0; x &lt; width; ++x) {\n          os &lt;&lt; types[ cells[cell_id++] ].symbol;\n        }\n        os &lt;&lt; '\\n';\n      }\n      os.flush();\n    }\n\n    bool Write(std::string filename, const type_options_t &amp; types) const {\n      std::ofstream os(filename);\n      if (!os.is_open()) {\n        std::cerr &lt;&lt; \"Could not open file '\" &lt;&lt; filename &lt;&lt; \"' to write grid.\" &lt;&lt; std::endl;\n        return false;\n      }\n      Write(os, types);\n      return true;\n    }\n\n    void Read(std::istream &amp; is, const type_options_t &amp; types) {\n      // Build a symbol chart for conversions back.\n      std::unordered_map&lt;char, size_t&gt; symbol_map;\n      for (size_t i=0; i &lt; types.size(); ++i) {\n        symbol_map[types[i].symbol] = i;\n      }\n\n      // Load the file into memory.\n      std::vector&lt;std::string&gt; char_grid;\n      std::string line;\n      width = 0;\n      while (std::getline(is, line)) {\n        char_grid.push_back(line);\n        if (line.size() &gt; width) width = line.size();\n      }\n      height = char_grid.size();\n\n      // Convert each symbol to the appropriate value.\n      cells.resize(width * height);\n      size_t cell_id = 0;\n      for (size_t y = 0; y &lt; height; ++y) {\n        for (size_t x = 0; x &lt; width; ++x) {\n          // Use the cell values provided, or zero if a cell position is missing.\n          cells[cell_id++] =\n            (x &lt; char_grid[y].size()) ? symbol_map[char_grid[y][x]] : 0;\n        }\n      }\n    }\n\n    bool Read(std::string filename, const type_options_t &amp; types) {\n      std::ifstream is(filename);\n      if (!is.is_open()) {\n        std::cerr &lt;&lt; \"Could not open file '\" &lt;&lt; filename &lt;&lt; \"' to write grid.\" &lt;&lt; std::endl;\n        return false;\n      }\n      Read(is, types);\n      return true;\n    }\n\n  };\n\n} // End of namespace cse491\n\n</code></pre>"},{"location":"Core%20Project/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace cse491 A base class interface for all agent types. </li> </ul>"},{"location":"Core%20Project/classes/","title":"Class Index","text":""},{"location":"Core%20Project/classes/#a","title":"a","text":"<ul> <li>AgentBase (cse491)</li> </ul>"},{"location":"Core%20Project/classes/#c","title":"c","text":"<ul> <li>CellType (cse491)</li> <li>CoreObject (cse491)</li> </ul>"},{"location":"Core%20Project/classes/#e","title":"e","text":"<ul> <li>Entity (cse491)</li> </ul>"},{"location":"Core%20Project/classes/#g","title":"g","text":"<ul> <li>GridPosition (cse491)</li> </ul>"},{"location":"Core%20Project/classes/#i","title":"i","text":"<ul> <li>InterfaceBase (cse491)</li> </ul>"},{"location":"Core%20Project/classes/#p","title":"p","text":"<ul> <li>Property (cse491::Entity)</li> <li>PropertyBase (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/classes/#w","title":"w","text":"<ul> <li>WorldBase (cse491)</li> <li>WorldGrid (cse491)</li> </ul>"},{"location":"Core%20Project/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class cse491::Entity <ul> <li>class cse491::AgentBase <ul> <li>class cse491::InterfaceBase </li> </ul> </li> </ul> </li> <li>class cse491::CoreObject <ul> <li>class cse491::WorldGrid A common interface class for core objects that sets up required functionality. This class ensures that objects can be serialized (saved), deserialized (restored) and provides helper functions. </li> </ul> </li> <li>class cse491::GridPosition Represents a position within a 2D grid of cells. This class provides utilities to manage a position in 2D space. The position is stored as floating-point values (to allow for smooth motion through a grid), but is easily converted to size_t for grid-cell identification. </li> <li>class cse491::WorldBase </li> <li>struct cse491::CellType Simple data structure to hold info about a TYPE of cell in the world. </li> <li>struct cse491::Entity::PropertyBase <ul> <li>struct cse491::Entity::Property </li> </ul> </li> </ul>"},{"location":"Core%20Project/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"Core%20Project/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"Core%20Project/class_members/","title":"Class Members","text":""},{"location":"Core%20Project/class_members/#a","title":"a","text":"<ul> <li>AddAction (cse491::AgentBase)</li> <li>AgentBase (cse491::AgentBase)</li> <li>action_map (cse491::AgentBase)</li> <li>action_result (cse491::AgentBase)</li> <li>AsProperty (cse491::Entity)</li> <li>Above (cse491::GridPosition)</li> <li>AddAgent (cse491::WorldBase)</li> <li>AddCellType (cse491::WorldBase)</li> <li>agent_set (cse491::WorldBase)</li> <li>At (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#b","title":"b","text":"<ul> <li>Below (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_members/#c","title":"c","text":"<ul> <li>CellX (cse491::GridPosition)</li> <li>CellY (cse491::GridPosition)</li> <li>ConfigAgent (cse491::WorldBase)</li> <li>cells (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#d","title":"d","text":"<ul> <li>desc (cse491::CellType)</li> <li>Deserialize (cse491::CoreObject)</li> <li>Deserialize_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>DoAction (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_members/#e","title":"e","text":"<ul> <li>EndDeserialize (cse491::CoreObject)</li> <li>EndSerialize (cse491::CoreObject)</li> <li>Entity (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_members/#g","title":"g","text":"<ul> <li>GetActionID (cse491::AgentBase)</li> <li>GetActionResult (cse491::AgentBase)</li> <li>GetTypeName (cse491::CoreObject)</li> <li>GetTypeName_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>GetID (cse491::Entity)</li> <li>GetName (cse491::Entity)</li> <li>GetPosition (cse491::Entity)</li> <li>GetProperty (cse491::Entity)</li> <li>GetOffset (cse491::GridPosition)</li> <li>GetX (cse491::GridPosition)</li> <li>GetY (cse491::GridPosition)</li> <li>GridPosition (cse491::GridPosition)</li> <li>GetAgent (cse491::WorldBase)</li> <li>GetCellTypeID (cse491::WorldBase)</li> <li>GetCellTypeName (cse491::WorldBase)</li> <li>GetCellTypeSymbol (cse491::WorldBase)</li> <li>GetCellTypes (cse491::WorldBase)</li> <li>GetGrid (cse491::WorldBase)</li> <li>GetItem (cse491::WorldBase)</li> <li>GetNumAgents (cse491::WorldBase)</li> <li>GetNumItems (cse491::WorldBase)</li> <li>GetRunOver (cse491::WorldBase)</li> <li>GetHeight (cse491::WorldGrid)</li> <li>GetNumCells (cse491::WorldGrid)</li> <li>GetWidth (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#h","title":"h","text":"<ul> <li>HasAction (cse491::AgentBase)</li> <li>HasProperty (cse491::Entity)</li> <li>height (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#i","title":"i","text":"<ul> <li>Initialize (cse491::AgentBase)</li> <li>IsAgent (cse491::AgentBase, cse491::Entity)</li> <li>IsInterface (cse491::Entity, cse491::InterfaceBase)</li> <li>id (cse491::Entity)</li> <li>InterfaceBase (cse491::InterfaceBase)</li> <li>item_set (cse491::WorldBase)</li> <li>IsValid (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#m","title":"m","text":"<ul> <li>main_grid (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_members/#n","title":"n","text":"<ul> <li>name (cse491::CellType, cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_members/#o","title":"o","text":"<ul> <li>operator= (cse491::Entity, cse491::GridPosition, cse491::WorldGrid)</li> <li>operator+ (cse491::GridPosition)</li> <li>operator+= (cse491::GridPosition)</li> <li>operator-= (cse491::GridPosition)</li> <li>operator&lt;=&gt; (cse491::GridPosition)</li> <li>operator[] (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#p","title":"p","text":"<ul> <li>Property (cse491::Entity::Property)</li> <li>position (cse491::Entity)</li> <li>property_map (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_members/#r","title":"r","text":"<ul> <li>RemoveProperty (cse491::Entity)</li> <li>Run (cse491::WorldBase)</li> <li>RunAgents (cse491::WorldBase)</li> <li>run_over (cse491::WorldBase)</li> <li>Read (cse491::WorldGrid)</li> <li>Resize (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#s","title":"s","text":"<ul> <li>SelectAction (cse491::AgentBase)</li> <li>SetActionResult (cse491::AgentBase)</li> <li>symbol (cse491::CellType)</li> <li>Serialize (cse491::CoreObject)</li> <li>Serialize_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>StartDeserialize (cse491::CoreObject)</li> <li>StartSerialize (cse491::CoreObject)</li> <li>SetName (cse491::Entity)</li> <li>SetPosition (cse491::Entity)</li> <li>SetProperties (cse491::Entity)</li> <li>SetProperty (cse491::Entity)</li> <li>Set (cse491::GridPosition)</li> <li>Shift (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_members/#t","title":"t","text":"<ul> <li>ToLeft (cse491::GridPosition)</li> <li>ToRight (cse491::GridPosition)</li> <li>type_options (cse491::WorldBase)</li> <li>ToIndex (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#u","title":"u","text":"<ul> <li>UpdateWorld (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_members/#v","title":"v","text":"<ul> <li>value (cse491::Entity::Property)</li> </ul>"},{"location":"Core%20Project/class_members/#w","title":"w","text":"<ul> <li>WorldBase (cse491::WorldBase)</li> <li>WorldGrid (cse491::WorldGrid)</li> <li>Write (cse491::WorldGrid)</li> <li>width (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_members/#x","title":"x","text":"<ul> <li>x (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_members/#y","title":"y","text":"<ul> <li>y (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_members/#_1","title":"~","text":"<ul> <li>~AgentBase (cse491::AgentBase)</li> <li>~CoreObject (cse491::CoreObject)</li> <li>~PropertyBase (cse491::Entity::PropertyBase)</li> <li>~Entity (cse491::Entity)</li> <li>~InterfaceBase (cse491::InterfaceBase)</li> <li>~WorldBase (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_functions/","title":"Class Member Functions","text":""},{"location":"Core%20Project/class_member_functions/#a","title":"a","text":"<ul> <li>AddAction (cse491::AgentBase)</li> <li>AgentBase (cse491::AgentBase)</li> <li>AsProperty (cse491::Entity)</li> <li>Above (cse491::GridPosition)</li> <li>AddAgent (cse491::WorldBase)</li> <li>AddCellType (cse491::WorldBase)</li> <li>At (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#b","title":"b","text":"<ul> <li>Below (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#c","title":"c","text":"<ul> <li>CellX (cse491::GridPosition)</li> <li>CellY (cse491::GridPosition)</li> <li>ConfigAgent (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#d","title":"d","text":"<ul> <li>Deserialize (cse491::CoreObject)</li> <li>Deserialize_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>DoAction (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#e","title":"e","text":"<ul> <li>EndDeserialize (cse491::CoreObject)</li> <li>EndSerialize (cse491::CoreObject)</li> <li>Entity (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#g","title":"g","text":"<ul> <li>GetActionID (cse491::AgentBase)</li> <li>GetActionResult (cse491::AgentBase)</li> <li>GetTypeName (cse491::CoreObject)</li> <li>GetTypeName_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>GetID (cse491::Entity)</li> <li>GetName (cse491::Entity)</li> <li>GetPosition (cse491::Entity)</li> <li>GetProperty (cse491::Entity)</li> <li>GetOffset (cse491::GridPosition)</li> <li>GetX (cse491::GridPosition)</li> <li>GetY (cse491::GridPosition)</li> <li>GridPosition (cse491::GridPosition)</li> <li>GetAgent (cse491::WorldBase)</li> <li>GetCellTypeID (cse491::WorldBase)</li> <li>GetCellTypeName (cse491::WorldBase)</li> <li>GetCellTypeSymbol (cse491::WorldBase)</li> <li>GetCellTypes (cse491::WorldBase)</li> <li>GetGrid (cse491::WorldBase)</li> <li>GetItem (cse491::WorldBase)</li> <li>GetNumAgents (cse491::WorldBase)</li> <li>GetNumItems (cse491::WorldBase)</li> <li>GetRunOver (cse491::WorldBase)</li> <li>GetHeight (cse491::WorldGrid)</li> <li>GetNumCells (cse491::WorldGrid)</li> <li>GetWidth (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#h","title":"h","text":"<ul> <li>HasAction (cse491::AgentBase)</li> <li>HasProperty (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#i","title":"i","text":"<ul> <li>Initialize (cse491::AgentBase)</li> <li>IsAgent (cse491::AgentBase, cse491::Entity)</li> <li>IsInterface (cse491::Entity, cse491::InterfaceBase)</li> <li>InterfaceBase (cse491::InterfaceBase)</li> <li>IsValid (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#o","title":"o","text":"<ul> <li>operator= (cse491::Entity, cse491::GridPosition, cse491::WorldGrid)</li> <li>operator+ (cse491::GridPosition)</li> <li>operator+= (cse491::GridPosition)</li> <li>operator-= (cse491::GridPosition)</li> <li>operator&lt;=&gt; (cse491::GridPosition)</li> <li>operator[] (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#p","title":"p","text":"<ul> <li>Property (cse491::Entity::Property)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#r","title":"r","text":"<ul> <li>RemoveProperty (cse491::Entity)</li> <li>Run (cse491::WorldBase)</li> <li>RunAgents (cse491::WorldBase)</li> <li>Read (cse491::WorldGrid)</li> <li>Resize (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#s","title":"s","text":"<ul> <li>SelectAction (cse491::AgentBase)</li> <li>SetActionResult (cse491::AgentBase)</li> <li>Serialize (cse491::CoreObject)</li> <li>Serialize_impl (cse491::CoreObject, cse491::WorldGrid)</li> <li>StartDeserialize (cse491::CoreObject)</li> <li>StartSerialize (cse491::CoreObject)</li> <li>SetName (cse491::Entity)</li> <li>SetPosition (cse491::Entity)</li> <li>SetProperties (cse491::Entity)</li> <li>SetProperty (cse491::Entity)</li> <li>Set (cse491::GridPosition)</li> <li>Shift (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#t","title":"t","text":"<ul> <li>ToLeft (cse491::GridPosition)</li> <li>ToRight (cse491::GridPosition)</li> <li>ToIndex (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#u","title":"u","text":"<ul> <li>UpdateWorld (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#w","title":"w","text":"<ul> <li>WorldBase (cse491::WorldBase)</li> <li>WorldGrid (cse491::WorldGrid)</li> <li>Write (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_functions/#_1","title":"~","text":"<ul> <li>~AgentBase (cse491::AgentBase)</li> <li>~CoreObject (cse491::CoreObject)</li> <li>~PropertyBase (cse491::Entity::PropertyBase)</li> <li>~Entity (cse491::Entity)</li> <li>~InterfaceBase (cse491::InterfaceBase)</li> <li>~WorldBase (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/","title":"Class Member Variables","text":""},{"location":"Core%20Project/class_member_variables/#a","title":"a","text":"<ul> <li>action_map (cse491::AgentBase)</li> <li>action_result (cse491::AgentBase)</li> <li>agent_set (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#c","title":"c","text":"<ul> <li>cells (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#d","title":"d","text":"<ul> <li>desc (cse491::CellType)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#h","title":"h","text":"<ul> <li>height (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#i","title":"i","text":"<ul> <li>id (cse491::Entity)</li> <li>item_set (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#m","title":"m","text":"<ul> <li>main_grid (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#n","title":"n","text":"<ul> <li>name (cse491::CellType, cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#p","title":"p","text":"<ul> <li>position (cse491::Entity)</li> <li>property_map (cse491::Entity)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#r","title":"r","text":"<ul> <li>run_over (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#s","title":"s","text":"<ul> <li>symbol (cse491::CellType)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#t","title":"t","text":"<ul> <li>type_options (cse491::WorldBase)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#v","title":"v","text":"<ul> <li>value (cse491::Entity::Property)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#w","title":"w","text":"<ul> <li>width (cse491::WorldGrid)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#x","title":"x","text":"<ul> <li>x (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_member_variables/#y","title":"y","text":"<ul> <li>y (cse491::GridPosition)</li> </ul>"},{"location":"Core%20Project/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"Core%20Project/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"Core%20Project/namespace_members/","title":"Namespace Members","text":""},{"location":"Core%20Project/namespace_members/#a","title":"a","text":"<ul> <li>agent_set_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_members/#i","title":"i","text":"<ul> <li>item_set_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_members/#t","title":"t","text":"<ul> <li>type_options_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"Core%20Project/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"Core%20Project/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":""},{"location":"Core%20Project/namespace_member_typedefs/#a","title":"a","text":"<ul> <li>agent_set_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_member_typedefs/#i","title":"i","text":"<ul> <li>item_set_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_member_typedefs/#t","title":"t","text":"<ul> <li>type_options_t (cse491)</li> </ul>"},{"location":"Core%20Project/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"Core%20Project/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"Core%20Project/macros/","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"Core%20Project/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"Core%20Project/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}